diff --git a/.drone.yml b/.drone.yml
index ac8c92918..3b7e1b002 100644
--- a/.drone.yml
+++ b/.drone.yml
@@ -186,6 +186,7 @@ steps:
       GOPROXY: off
       TAGS: bindata
       TEST_LDAP: 1
+      TEST_INDEXER_CODE_ES_URL: "http://elastic:changeme@elasticsearch:9200"
       USE_REPO_TEST_DIR: 1
     depends_on:
       - build
diff --git a/.drone.yml.orig b/.drone.yml.orig
new file mode 100644
index 000000000..ac8c92918
--- /dev/null
+++ b/.drone.yml.orig
@@ -0,0 +1,812 @@
+---
+kind: pipeline
+name: compliance
+
+platform:
+  os: linux
+  arch: arm64
+
+workspace:
+  base: /go
+  path: src/code.gitea.io/gitea
+
+steps:
+  - name: deps-frontend
+    pull: always
+    image: node:12
+    commands:
+      - make node_modules
+
+  - name: lint-frontend
+    pull: always
+    image: node:12
+    commands:
+      - make lint-frontend
+    depends_on: [deps-frontend]
+
+  - name: lint-backend
+    pull: always
+    image: golang:1.14
+    commands:
+      - make lint-backend
+    environment:
+      GOPROXY: https://goproxy.cn # proxy.golang.org is blocked in China, this proxy is not
+      GOSUMDB: sum.golang.org
+      TAGS: bindata sqlite sqlite_unlock_notify
+
+  - name: build-frontend
+    pull: always
+    image: node:10 # this step is kept at the lowest version of node that we support
+    commands:
+      - make frontend
+    depends_on: [lint-frontend]
+
+  - name: build-backend-no-gcc
+    pull: always
+    image: golang:1.12 # this step is kept as the lowest version of golang that we support
+    environment:
+      GO111MODULE: on
+      GOPROXY: off
+    commands:
+      - go build -mod=vendor -o gitea_no_gcc # test if build succeeds without the sqlite tag
+    depends_on: [lint-backend]
+
+  - name: build-backend-arm64
+    pull: always
+    image: golang:1.14
+    environment:
+      GO111MODULE: on
+      GOPROXY: off
+      GOOS: linux
+      GOARCH: arm64
+      TAGS: bindata
+    commands:
+      - make backend # test cross compile
+      - rm ./gitea # clean
+    depends_on: [lint-backend]
+
+  - name: build-backend-386
+    pull: always
+    image: golang:1.14
+    environment:
+      GO111MODULE: on
+      GOPROXY: off
+      GOOS: linux
+      GOARCH: 386
+    commands:
+      - go build -mod=vendor -o gitea_linux_386 # test if compatible with 32 bit
+    depends_on: [lint-backend]
+
+---
+kind: pipeline
+name: testing-amd64
+
+platform:
+  os: linux
+  arch: amd64
+
+depends_on:
+  - compliance
+
+workspace:
+  base: /go
+  path: src/code.gitea.io/gitea
+
+services:
+  - name: mysql
+    pull: default
+    image: mysql:5.7
+    environment:
+      MYSQL_ALLOW_EMPTY_PASSWORD: yes
+      MYSQL_DATABASE: test
+      GOPROXY: off
+      TAGS: bindata sqlite sqlite_unlock_notify
+      GITLAB_READ_TOKEN:
+        from_secret: gitlab_read_token
+    depends_on:
+      - build
+    when:
+      branch:
+        - master
+      event:
+        - push
+        - pull_request
+
+  - name: mysql8
+    pull: default
+    image: mysql:8.0
+    environment:
+      MYSQL_ALLOW_EMPTY_PASSWORD: yes
+      MYSQL_DATABASE: testgitea
+
+  - name: mssql
+    pull: default
+    image: mcr.microsoft.com/mssql/server:latest
+    environment:
+      ACCEPT_EULA: Y
+      MSSQL_PID: Standard
+      SA_PASSWORD: MwantsaSecurePassword1
+
+  - name: ldap
+    pull: default
+    image: gitea/test-openldap:latest
+
+  - name: elasticsearch
+    pull: default
+    environment:
+      discovery.type: single-node
+    image: elasticsearch:7.5.0
+
+steps:
+  - name: fetch-tags
+    pull: default
+    image: docker:git
+    commands:
+      - git fetch --tags --force
+    when:
+      event:
+        exclude:
+          - pull_request
+
+  - name: build
+    pull: always
+    image: golang:1.14
+    commands:
+      - make backend
+    environment:
+      GOPROXY: https://goproxy.cn # proxy.golang.org is blocked in China, this proxy is not
+      GOSUMDB: sum.golang.org
+      TAGS: bindata sqlite sqlite_unlock_notify
+
+  - name: tag-pre-condition
+    pull: always
+    image: alpine/git
+    commands:
+      - git update-ref refs/heads/tag_test ${DRONE_COMMIT_SHA}
+
+  - name: unit-test
+    pull: always
+    image: golang:1.14
+    commands:
+      - make unit-test-coverage test-check
+    environment:
+      GOPROXY: off
+      TAGS: bindata sqlite sqlite_unlock_notify
+      GITHUB_READ_TOKEN:
+        from_secret: github_read_token
+
+  - name: test-mysql
+    pull: always
+    image: golang:1.14
+    commands:
+      - "curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash"
+      - apt-get install -y git-lfs
+      - make test-mysql-migration integration-test-coverage
+    environment:
+      GOPROXY: off
+      TAGS: bindata
+      TEST_LDAP: 1
+      USE_REPO_TEST_DIR: 1
+    depends_on:
+      - build
+
+  - name: test-mysql8
+    pull: always
+    image: golang:1.14
+    commands:
+      - "curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash"
+      - apt-get install -y git-lfs
+      - timeout -s ABRT 40m make test-mysql8-migration test-mysql8
+    environment:
+      GOPROXY: off
+      TAGS: bindata
+      TEST_LDAP: 1
+      USE_REPO_TEST_DIR: 1
+    depends_on:
+      - build
+
+  - name: test-mssql
+    pull: always
+    image: golang:1.14
+    commands:
+      - "curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash"
+      - apt-get install -y git-lfs
+      - make test-mssql-migration test-mssql
+    environment:
+      GOPROXY: off
+      TAGS: bindata
+      TEST_LDAP: 1
+      USE_REPO_TEST_DIR: 1
+    depends_on:
+      - build
+
+  - name: generate-coverage
+    pull: always
+    image: golang:1.14
+    commands:
+      - make coverage
+    environment:
+      GOPROXY: off
+      TAGS: bindata
+    depends_on:
+      - unit-test
+      - test-mysql
+    when:
+      branch:
+        - master
+      event:
+        - push
+        - pull_request
+
+  - name: coverage
+    pull: always
+    image: robertstettner/drone-codecov
+    settings:
+      files:
+        - coverage.all
+    environment:
+      CODECOV_TOKEN:
+        from_secret: codecov_token
+    depends_on:
+      - generate-coverage
+    when:
+      branch:
+        - master
+      event:
+        - push
+        - pull_request
+
+---
+kind: pipeline
+name: testing-arm64
+
+platform:
+  os: linux
+  arch: arm64
+
+depends_on:
+  - compliance
+
+workspace:
+  base: /go
+  path: src/code.gitea.io/gitea
+
+services:
+  - name: pgsql
+    pull: default
+    image: postgres:9.5
+    environment:
+      POSTGRES_DB: test
+      POSTGRES_PASSWORD: postgres
+
+  - name: ldap
+    pull: default
+    image: gitea/test-openldap:latest
+
+steps:
+  - name: fetch-tags
+    pull: default
+    image: docker:git
+    commands:
+      - git fetch --tags --force
+    when:
+      event:
+        exclude:
+          - pull_request
+
+  - name: build
+    pull: always
+    image: golang:1.14
+    commands:
+      - make backend
+    environment:
+      GOPROXY: https://goproxy.cn # proxy.golang.org is blocked in China, this proxy is not
+      GOSUMDB: sum.golang.org
+      TAGS: bindata sqlite sqlite_unlock_notify
+
+  - name: test-sqlite
+    pull: always
+    image: golang:1.14
+    commands:
+      - "curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash"
+      - apt-get install -y git-lfs
+      - timeout -s ABRT 40m make test-sqlite-migration test-sqlite
+    environment:
+      GOPROXY: off
+      TAGS: bindata
+      USE_REPO_TEST_DIR: 1
+    depends_on:
+      - build
+
+  - name: test-pgsql
+    pull: always
+    image: golang:1.14
+    commands:
+      - "curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash"
+      - apt-get install -y git-lfs
+      - timeout -s ABRT 40m make test-pgsql-migration test-pgsql
+    environment:
+      GOPROXY: off
+      TAGS: bindata
+      TEST_LDAP: 1
+      USE_REPO_TEST_DIR: 1
+    depends_on:
+      - build
+
+---
+kind: pipeline
+name: translations
+
+platform:
+  os: linux
+  arch: arm64
+
+workspace:
+  base: /go
+  path: src/code.gitea.io/gitea
+
+trigger:
+  branch:
+    - master
+  event:
+    - push
+
+steps:
+  - name: download
+    pull: always
+    image: jonasfranz/crowdin
+    settings:
+      download: true
+      export_dir: options/locale/
+      ignore_branch: true
+      project_identifier: gitea
+    environment:
+      CROWDIN_KEY:
+        from_secret: crowdin_key
+
+  - name: update
+    pull: default
+    image: alpine:3.11
+    commands:
+      - ./build/update-locales.sh
+
+  - name: push
+    pull: always
+    image: appleboy/drone-git-push
+    settings:
+      author_email: "teabot@gitea.io"
+      author_name: GiteaBot
+      commit: true
+      commit_message: "[skip ci] Updated translations via Crowdin"
+      remote: "git@github.com:go-gitea/gitea.git"
+    environment:
+      GIT_PUSH_SSH_KEY:
+        from_secret: git_push_ssh_key
+
+  - name: upload_translations
+    pull: always
+    image: jonasfranz/crowdin
+    settings:
+      files:
+        locale_en-US.ini: options/locale/locale_en-US.ini
+      ignore_branch: true
+      project_identifier: gitea
+    environment:
+      CROWDIN_KEY:
+        from_secret: crowdin_key
+
+---
+kind: pipeline
+name: release-latest
+
+platform:
+  os: linux
+  arch: amd64
+
+workspace:
+  base: /go
+  path: src/code.gitea.io/gitea
+
+trigger:
+  branch:
+    - master
+    - "release/*"
+  event:
+    - push
+
+depends_on:
+  - testing-amd64
+  - testing-arm64
+  - translations
+
+steps:
+  - name: fetch-tags
+    pull: default
+    image: docker:git
+    commands:
+      - git fetch --tags --force
+
+  - name: static
+    pull: always
+    image: techknowlogick/xgo:go-1.14.x
+    commands:
+      - apt update && apt -y install curl
+      - curl -sL https://deb.nodesource.com/setup_12.x | bash - && apt -y install nodejs
+      - export PATH=$PATH:$GOPATH/bin
+      - make release
+    environment:
+      GOPROXY: https://goproxy.cn # proxy.golang.org is blocked in China, this proxy is not
+      TAGS: bindata sqlite sqlite_unlock_notify
+
+  - name: gpg-sign
+    pull: always
+    image: plugins/gpgsign:1
+    settings:
+      detach_sign: true
+      excludes:
+        - "dist/release/*.sha256"
+      files:
+        - "dist/release/*"
+    environment:
+      GPGSIGN_KEY:
+        from_secret: gpgsign_key
+      GPGSIGN_PASSPHRASE:
+        from_secret: gpgsign_passphrase
+
+  - name: release-branch
+    pull: always
+    image: plugins/s3:1
+    settings:
+      acl: public-read
+      bucket: releases
+      endpoint: https://storage.gitea.io
+      path_style: true
+      source: "dist/release/*"
+      strip_prefix: dist/release/
+      target: "/gitea/${DRONE_BRANCH##release/v}"
+    environment:
+      AWS_ACCESS_KEY_ID:
+        from_secret: aws_access_key_id
+      AWS_SECRET_ACCESS_KEY:
+        from_secret: aws_secret_access_key
+    when:
+      branch:
+        - "release/*"
+      event:
+        - push
+
+  - name: release-master
+    pull: always
+    image: plugins/s3:1
+    settings:
+      acl: public-read
+      bucket: releases
+      endpoint: https://storage.gitea.io
+      path_style: true
+      source: "dist/release/*"
+      strip_prefix: dist/release/
+      target: /gitea/master
+    environment:
+      AWS_ACCESS_KEY_ID:
+        from_secret: aws_access_key_id
+      AWS_SECRET_ACCESS_KEY:
+        from_secret: aws_secret_access_key
+    when:
+      branch:
+        - master
+      event:
+        - push
+
+---
+kind: pipeline
+name: release-version
+
+platform:
+  os: linux
+  arch: amd64
+
+workspace:
+  base: /go
+  path: src/code.gitea.io/gitea
+
+trigger:
+  event:
+    - tag
+
+depends_on:
+  - testing-arm64
+  - testing-amd64
+
+steps:
+  - name: fetch-tags
+    pull: default
+    image: docker:git
+    commands:
+      - git fetch --tags --force
+
+  - name: static
+    pull: always
+    image: techknowlogick/xgo:go-1.14.x
+    commands:
+      - apt update && apt -y install curl
+      - curl -sL https://deb.nodesource.com/setup_12.x | bash - && apt -y install nodejs
+      - export PATH=$PATH:$GOPATH/bin
+      - make release
+    environment:
+      GOPROXY: https://goproxy.cn # proxy.golang.org is blocked in China, this proxy is not
+      TAGS: bindata sqlite sqlite_unlock_notify
+
+  - name: gpg-sign
+    pull: always
+    image: plugins/gpgsign:1
+    settings:
+      detach_sign: true
+      excludes:
+        - "dist/release/*.sha256"
+      files:
+        - "dist/release/*"
+    environment:
+      GPGSIGN_KEY:
+        from_secret: gpgsign_key
+      GPGSIGN_PASSPHRASE:
+        from_secret: gpgsign_passphrase
+
+  - name: release-tag
+    pull: always
+    image: plugins/s3:1
+    settings:
+      acl: public-read
+      bucket: releases
+      endpoint: https://storage.gitea.io
+      path_style: true
+      source: "dist/release/*"
+      strip_prefix: dist/release/
+      target: "/gitea/${DRONE_TAG##v}"
+    environment:
+      AWS_ACCESS_KEY_ID:
+        from_secret: aws_access_key_id
+      AWS_SECRET_ACCESS_KEY:
+        from_secret: aws_secret_access_key
+
+  - name: github
+    pull: always
+    image: plugins/github-release:1
+    settings:
+      files:
+        - "dist/release/*"
+    environment:
+      GITHUB_TOKEN:
+        from_secret: github_token
+
+---
+kind: pipeline
+name: docs
+
+platform:
+  os: linux
+  arch: arm64
+
+depends_on:
+  - compliance
+
+steps:
+  - name: build-docs
+    pull: always
+    image: plugins/hugo:latest
+    commands:
+      - apk add --no-cache make bash curl
+      - cd docs
+      - make trans-copy clean build
+
+  - name: publish-docs
+    pull: always
+    image: techknowlogick/drone-netlify:latest
+    settings:
+      path: docs/public/
+      site_id: d2260bae-7861-4c02-8646-8f6440b12672
+    environment:
+      NETLIFY_TOKEN:
+        from_secret: netlify_token
+    when:
+      branch:
+        - master
+      event:
+        - push
+
+---
+kind: pipeline
+name: docker-linux-amd64-release
+
+platform:
+  os: linux
+  arch: amd64
+
+workspace:
+  base: /go
+  path: src/code.gitea.io/gitea
+
+depends_on:
+  - testing-amd64
+  - testing-arm64
+
+trigger:
+  ref:
+  - refs/heads/master
+  - "refs/tags/**"
+
+steps:
+  - name: fetch-tags
+    pull: default
+    image: docker:git
+    commands:
+      - git fetch --tags --force
+
+  - name: publish
+    pull: always
+    image: plugins/docker:linux-amd64
+    settings:
+      auto_tag: true
+      auto_tag_suffix: linux-amd64
+      repo: gitea/gitea
+      build_args:
+        - GOPROXY=off
+      password:
+        from_secret: docker_password
+      username:
+        from_secret: docker_username
+    when:
+      event:
+        exclude:
+        - pull_request
+
+---
+kind: pipeline
+name: docker-linux-arm64-dry-run
+
+platform:
+  os: linux
+  arch: arm64
+
+workspace:
+  base: /go
+  path: src/code.gitea.io/gitea
+
+depends_on:
+  - compliance
+
+trigger:
+  ref:
+  - "refs/pull/**"
+
+steps:
+  - name: dryrun
+    pull: always
+    image: plugins/docker:linux-arm64
+    settings:
+      dry_run: true
+      repo: gitea/gitea
+      tags: linux-arm64
+      build_args:
+        - GOPROXY=off
+    when:
+      event:
+        - pull_request
+
+---
+kind: pipeline
+name: docker-linux-arm64-release
+
+platform:
+  os: linux
+  arch: arm64
+
+workspace:
+  base: /go
+  path: src/code.gitea.io/gitea
+
+depends_on:
+  - testing-amd64
+  - testing-arm64
+
+trigger:
+  ref:
+  - refs/heads/master
+  - "refs/tags/**"
+steps:
+  - name: fetch-tags
+    pull: default
+    image: docker:git
+    commands:
+      - git fetch --tags --force
+
+  - name: publish
+    pull: always
+    image: plugins/docker:linux-arm64
+    settings:
+      auto_tag: true
+      auto_tag_suffix: linux-arm64
+      repo: gitea/gitea
+      build_args:
+        - GOPROXY=off
+      password:
+        from_secret: docker_password
+      username:
+        from_secret: docker_username
+    when:
+      event:
+        exclude:
+        - pull_request
+
+---
+kind: pipeline
+name: docker-manifest
+
+platform:
+  os: linux
+  arch: amd64
+
+steps:
+  - name: manifest
+    pull: always
+    image: plugins/manifest
+    settings:
+      auto_tag: true
+      ignore_missing: true
+      spec: docker/manifest.tmpl
+      password:
+        from_secret: docker_password
+      username:
+        from_secret: docker_username
+
+trigger:
+  ref:
+  - refs/heads/master
+  - "refs/tags/**"
+
+depends_on:
+  - docker-linux-amd64-release
+  - docker-linux-arm64-release
+
+---
+kind: pipeline
+name: notifications
+
+platform:
+  os: linux
+  arch: arm64
+
+clone:
+  disable: true
+
+trigger:
+  branch:
+    - master
+    - "release/*"
+  event:
+    - push
+    - tag
+  status:
+    - success
+    - failure
+
+depends_on:
+  - testing-amd64
+  - testing-arm64
+  - translations
+  - release-version
+  - release-latest
+  - docker-linux-amd64-release
+  - docker-linux-arm64-release
+  - docker-manifest
+  - docs
+
+steps:
+  - name: discord
+    pull: always
+    image: appleboy/drone-discord:1.2.4
+    settings:
+      message: "{{#success build.status}} ✅  Build #{{build.number}} of `{{repo.name}}` succeeded.\n\n📝 Commit by {{commit.author}} on `{{commit.branch}}`:\n``` {{commit.message}} ```\n\n🌐 {{ build.link }} {{else}} ❌  Build #{{build.number}} of `{{repo.name}}` failed.\n\n📝 Commit by {{commit.author}} on `{{commit.branch}}`:\n``` {{commit.message}} ```\n\n🌐 {{ build.link }} {{/success}}\n"
+      webhook_id:
+        from_secret: discord_webhook_id
+      webhook_token:
+        from_secret: discord_webhook_token
diff --git a/custom/conf/app.ini.sample b/custom/conf/app.ini.sample
index 06b7b96d4..50a61d8ea 100644
--- a/custom/conf/app.ini.sample
+++ b/custom/conf/app.ini.sample
@@ -409,7 +409,15 @@ STARTUP_TIMEOUT=30s
 
 ; repo indexer by default disabled, since it uses a lot of disk space
 REPO_INDEXER_ENABLED = false
+; Code search engine type, could be `bleve` or `elasticsearch`.
+REPO_INDEXER_TYPE = bleve
+; Index file used for code search.
 REPO_INDEXER_PATH = indexers/repos.bleve
+; Code indexer connection string, available when `REPO_INDEXER_TYPE` is elasticsearch. i.e. http://elastic:changeme@localhost:9200
+REPO_INDEXER_CONN_STR = 
+; Code indexer name, available when `REPO_INDEXER_TYPE` is elasticsearch
+`REPO_INDEXER_NAME` = gitea_codes
+
 UPDATE_BUFFER_LEN = 20
 MAX_FILE_SIZE = 1048576
 ; A comma separated list of glob patterns (see https://github.com/gobwas/glob) to include
diff --git a/docs/content/doc/advanced/config-cheat-sheet.en-us.md b/docs/content/doc/advanced/config-cheat-sheet.en-us.md
index 3ad24776f..80dcce1a6 100644
--- a/docs/content/doc/advanced/config-cheat-sheet.en-us.md
+++ b/docs/content/doc/advanced/config-cheat-sheet.en-us.md
@@ -264,7 +264,11 @@ relation to port exhaustion.
 - `ISSUE_INDEXER_QUEUE_BATCH_NUMBER`: **20**: Batch queue number.
 
 - `REPO_INDEXER_ENABLED`: **false**: Enables code search (uses a lot of disk space, about 6 times more than the repository size).
+- `REPO_INDEXER_TYPE`: **bleve**: Code search engine type, could be `bleve` or `elasticsearch`.
 - `REPO_INDEXER_PATH`: **indexers/repos.bleve**: Index file used for code search.
+- `REPO_INDEXER_CONN_STR`: ****: Code indexer connection string, available when `REPO_INDEXER_TYPE` is elasticsearch. i.e. http://elastic:changeme@localhost:9200
+- `REPO_INDEXER_NAME`: **gitea_codes**: Code indexer name, available when `REPO_INDEXER_TYPE` is elasticsearch
+
 - `REPO_INDEXER_INCLUDE`: **empty**: A comma separated list of glob patterns (see https://github.com/gobwas/glob) to **include** in the index. Use `**.txt` to match any files with .txt extension. An empty list means include all files.
 - `REPO_INDEXER_EXCLUDE`: **empty**: A comma separated list of glob patterns (see https://github.com/gobwas/glob) to **exclude** from the index. Files that match this list will not be indexed, even if they match in `REPO_INDEXER_INCLUDE`.
 - `REPO_INDEXER_EXCLUDE_VENDORED`: **true**: Exclude vendored files from index.
diff --git a/docs/content/doc/advanced/config-cheat-sheet.en-us.md.orig b/docs/content/doc/advanced/config-cheat-sheet.en-us.md.orig
new file mode 100644
index 000000000..3ad24776f
--- /dev/null
+++ b/docs/content/doc/advanced/config-cheat-sheet.en-us.md.orig
@@ -0,0 +1,699 @@
+---
+date: "2016-12-26T16:00:00+02:00"
+title: "Config Cheat Sheet"
+slug: "config-cheat-sheet"
+weight: 20
+toc: false
+draft: false
+menu:
+  sidebar:
+    parent: "advanced"
+    name: "Config Cheat Sheet"
+    weight: 20
+    identifier: "config-cheat-sheet"
+---
+
+# Configuration Cheat Sheet
+
+This is a cheat sheet for the Gitea configuration file. It contains most of the settings
+that can be configured as well as their default values.
+
+Any changes to the Gitea configuration file should be made in `custom/conf/app.ini`
+or any corresponding location. When installing from a distribution, this will
+typically be found at `/etc/gitea/conf/app.ini`.
+
+The defaults provided here are best-effort (not built automatically). They are
+accurately recorded in [app.ini.sample](https://github.com/go-gitea/gitea/blob/master/custom/conf/app.ini.sample)
+(s/master/\<tag|release\>). Any string in the format `%(X)s` is a feature powered
+by [ini](https://github.com/go-ini/ini/#recursive-values), for reading values recursively.
+
+Values containing `#` or `;` must be quoted using `` ` `` or `"""`.
+
+**Note:** A full restart is required for Gitea configuration changes to take effect.
+
+## Overall (`DEFAULT`)
+
+- `APP_NAME`: **Gitea: Git with a cup of tea**: Application name, used in the page title.
+- `RUN_USER`: **git**: The user Gitea will run as. This should be a dedicated system
+   (non-user) account. Setting this incorrectly will cause Gitea to not start.
+- `RUN_MODE`: **dev**: For performance and other purposes, change this to `prod` when
+   deployed to a production environment. The installation process will set this to `prod`
+   automatically. \[prod, dev, test\]
+
+## Repository (`repository`)
+
+- `ROOT`: **~/gitea-repositories/**: Root path for storing all repository data. It must be
+   an absolute path.
+- `SCRIPT_TYPE`: **bash**: The script type this server supports. Usually this is `bash`,
+   but some users report that only `sh` is available.
+- `ANSI_CHARSET`: **\<empty\>**: The default charset for an unrecognized charset.
+- `FORCE_PRIVATE`: **false**: Force every new repository to be private.
+- `DEFAULT_PRIVATE`: **last**: Default private when creating a new repository.
+   \[last, private, public\]
+- `MAX_CREATION_LIMIT`: **-1**: Global maximum creation limit of repositories per user,
+   `-1` means no limit.
+- `PULL_REQUEST_QUEUE_LENGTH`: **1000**: Length of pull request patch test queue, make it
+   as large as possible. Use caution when editing this value.
+- `MIRROR_QUEUE_LENGTH`: **1000**: Patch test queue length, increase if pull request patch
+   testing starts hanging.
+- `PREFERRED_LICENSES`: **Apache License 2.0,MIT License**: Preferred Licenses to place at
+   the top of the list. Name must match file name in conf/license or custom/conf/license.
+- `DISABLE_HTTP_GIT`: **false**: Disable the ability to interact with repositories over the
+   HTTP protocol.
+- `USE_COMPAT_SSH_URI`: **false**: Force ssh:// clone url instead of scp-style uri when
+   default SSH port is used.
+- `ACCESS_CONTROL_ALLOW_ORIGIN`: **\<empty\>**: Value for Access-Control-Allow-Origin header,
+   default is not to present. **WARNING**: This maybe harmful to you website if you do not
+   give it a right value.
+- `DEFAULT_CLOSE_ISSUES_VIA_COMMITS_IN_ANY_BRANCH`:  **false**: Close an issue if a commit on a non default branch marks it as closed.
+- `ENABLE_PUSH_CREATE_USER`:  **false**: Allow users to push local repositories to Gitea and have them automatically created for a user.
+- `ENABLE_PUSH_CREATE_ORG`:  **false**: Allow users to push local repositories to Gitea and have them automatically created for an org.
+- `PREFIX_ARCHIVE_FILES`: **true**: Prefix archive files by placing them in a directory named after the repository.
+
+### Repository - Pull Request (`repository.pull-request`)
+
+- `WORK_IN_PROGRESS_PREFIXES`: **WIP:,\[WIP\]**: List of prefixes used in Pull Request
+ title to mark them as Work In Progress
+- `CLOSE_KEYWORDS`: **close**, **closes**, **closed**, **fix**, **fixes**, **fixed**, **resolve**, **resolves**, **resolved**: List of
+ keywords used in Pull Request comments to automatically close a related issue
+- `REOPEN_KEYWORDS`: **reopen**, **reopens**, **reopened**: List of keywords used in Pull Request comments to automatically reopen
+ a related issue
+- `DEFAULT_MERGE_MESSAGE_COMMITS_LIMIT`: **50**: In the default merge message for squash commits include at most this many commits. Set to `-1` to include all commits
+- `DEFAULT_MERGE_MESSAGE_SIZE`: **5120**: In the default merge message for squash commits limit the size of the commit messages. Set to `-1` to have no limit.
+- `DEFAULT_MERGE_MESSAGE_ALL_AUTHORS`: **false**: In the default merge message for squash commits walk all commits to include all authors in the Co-authored-by otherwise just use those in the limited list
+- `DEFAULT_MERGE_MESSAGE_MAX_APPROVERS`: **10**: In default merge messages limit the number of approvers listed as `Reviewed-by:`. Set to `-1` to include all.
+- `DEFAULT_MERGE_MESSAGE_OFFICIAL_APPROVERS_ONLY`: **true**: In default merge messages only include approvers who are officially allowed to review.
+
+### Repository - Issue (`repository.issue`)
+
+- `LOCK_REASONS`: **Too heated,Off-topic,Resolved,Spam**: A list of reasons why a Pull Request or Issue can be locked
+
+### Repository - Signing (`repository.signing`)
+
+- `SIGNING_KEY`: **default**: \[none, KEYID, default \]: Key to sign with.
+- `SIGNING_NAME` &amp; `SIGNING_EMAIL`: if a KEYID is provided as the `SIGNING_KEY`, use these as the Name and Email address of the signer. These should match publicized name and email address for the key.
+- `INITIAL_COMMIT`: **always**: \[never, pubkey, twofa, always\]: Sign initial commit.
+  - `never`: Never sign
+  - `pubkey`: Only sign if the user has a public key
+  - `twofa`: Only sign if the user is logged in with twofa
+  - `always`: Always sign
+  - Options other than `never` and `always` can be combined as a comma separated list.
+- `WIKI`: **never**: \[never, pubkey, twofa, always, parentsigned\]: Sign commits to wiki.
+- `CRUD_ACTIONS`: **pubkey, twofa, parentsigned**: \[never, pubkey, twofa, parentsigned, always\]: Sign CRUD actions.
+  - Options as above, with the addition of:
+  - `parentsigned`: Only sign if the parent commit is signed.
+- `MERGES`: **pubkey, twofa, basesigned, commitssigned**: \[never, pubkey, twofa, approved, basesigned, commitssigned, always\]: Sign merges.
+  - `approved`: Only sign approved merges to a protected branch.
+  - `basesigned`: Only sign if the parent commit in the base repo is signed.
+  - `headsigned`: Only sign if the head commit in the head branch is signed.
+  - `commitssigned`: Only sign if all the commits in the head branch to the merge point are signed.
+
+## CORS (`cors`)
+
+- `ENABLED`: **false**: enable cors headers (disabled by default)
+- `SCHEME`: **http**: scheme of allowed requests
+- `ALLOW_DOMAIN`: **\***: list of requesting domains that are allowed
+- `ALLOW_SUBDOMAIN`: **false**: allow subdomains of headers listed above to request
+- `METHODS`: **GET,HEAD,POST,PUT,PATCH,DELETE,OPTIONS**: list of methods allowed to request
+- `MAX_AGE`: **10m**: max time to cache response
+- `ALLOW_CREDENTIALS`: **false**: allow request with credentials
+
+## UI (`ui`)
+
+- `EXPLORE_PAGING_NUM`: **20**: Number of repositories that are shown in one explore page.
+- `ISSUE_PAGING_NUM`: **10**: Number of issues that are shown in one page (for all pages that list issues).
+- `MEMBERS_PAGING_NUM`: **20**: Number of members that are shown in organization members.
+- `FEED_MAX_COMMIT_NUM`: **5**: Number of maximum commits shown in one activity feed.
+- `GRAPH_MAX_COMMIT_NUM`: **100**: Number of maximum commits shown in the commit graph.
+- `DEFAULT_THEME`: **gitea**: \[gitea, arc-green\]: Set the default theme for the Gitea install.
+- `THEMES`:  **gitea,arc-green**: All available themes. Allow users select personalized themes
+  regardless of the value of `DEFAULT_THEME`.
+- `REACTIONS`: All available reactions users can choose on issues/prs and comments
+    Values can be emoji alias (:smile:) or a unicode emoji.
+    For custom reactions, add a tightly cropped square image to public/emoji/img/reaction_name.png
+- `DEFAULT_SHOW_FULL_NAME`: **false**: Whether the full name of the users should be shown where possible. If the full name isn't set, the username will be used.
+- `SEARCH_REPO_DESCRIPTION`: **true**: Whether to search within description at repository search on explore page.
+- `USE_SERVICE_WORKER`: **true**: Whether to enable a Service Worker to cache frontend assets.
+
+### UI - Admin (`ui.admin`)
+
+- `USER_PAGING_NUM`: **50**: Number of users that are shown in one page.
+- `REPO_PAGING_NUM`: **50**: Number of repos that are shown in one page.
+- `NOTICE_PAGING_NUM`: **25**: Number of notices that are shown in one page.
+- `ORG_PAGING_NUM`: **50**: Number of organizations that are shown in one page.
+
+### UI - Notification (`ui.notification`)
+
+- `MIN_TIMEOUT`: **10s**: These options control how often notification endpoint is polled to update the notification count. On page load the notification count will be checked after `MIN_TIMEOUT`. The timeout will increase to `MAX_TIMEOUT` by `TIMEOUT_STEP` if the notification count is unchanged. Set MIN_TIMEOUT to 0 to turn off.
+- `MAX_TIMEOUT`: **60s**.
+- `TIMEOUT_STEP`: **10s**.
+- `EVENT_SOURCE_UPDATE_TIME`: **10s**: This setting determines how often the database is queried to update notification counts. If the browser client supports `EventSource`, it will be used in preference to polling notification endpoint.
+
+
+## Markdown (`markdown`)
+
+- `ENABLE_HARD_LINE_BREAK`: **true**: Render soft line breaks as hard line breaks, which
+  means a single newline character between paragraphs will cause a line break and adding
+  trailing whitespace to paragraphs is not necessary to force a line break.
+- `CUSTOM_URL_SCHEMES`: Use a comma separated list (ftp,git,svn) to indicate additional
+  URL hyperlinks to be rendered in Markdown. URLs beginning in http and https are
+  always displayed
+
+## Server (`server`)
+
+- `PROTOCOL`: **http**: \[http, https, fcgi, unix, fcgi+unix\]
+- `DOMAIN`: **localhost**: Domain name of this server.
+- `ROOT_URL`: **%(PROTOCOL)s://%(DOMAIN)s:%(HTTP\_PORT)s/**:
+   Overwrite the automatically generated public URL.
+   This is useful if the internal and the external URL don't match (e.g. in Docker).
+- `STATIC_URL_PREFIX`: **\<empty\>**:
+   Overwrite this option to request static resources from a different URL.
+   This includes CSS files, images, JS files and web fonts.
+   Avatar images are dynamic resources and still served by gitea.
+   The option can be just a different path, as in `/static`, or another domain, as in `https://cdn.example.com`.
+   Requests are then made as `%(ROOT_URL)s/static/css/index.css` and `https://cdn.example.com/css/index.css` respective.
+   The static files are located in the `public/` directory of the gitea source repository.
+- `HTTP_ADDR`: **0.0.0.0**: HTTP listen address.
+   - If `PROTOCOL` is set to `fcgi`, Gitea will listen for FastCGI requests on TCP socket
+     defined by `HTTP_ADDR` and `HTTP_PORT` configuration settings.
+   - If `PROTOCOL` is set to `unix` or `fcgi+unix`, this should be the name of the Unix socket file to use.
+- `HTTP_PORT`: **3000**: HTTP listen port.
+   - If `PROTOCOL` is set to `fcgi`, Gitea will listen for FastCGI requests on TCP socket
+     defined by `HTTP_ADDR` and `HTTP_PORT` configuration settings.
+- `UNIX_SOCKET_PERMISSION`: **666**: Permissions for the Unix socket.
+- `LOCAL_ROOT_URL`: **%(PROTOCOL)s://%(HTTP_ADDR)s:%(HTTP_PORT)s/**: Local
+   (DMZ) URL for Gitea workers (such as SSH update) accessing web service. In
+   most cases you do not need to change the default value. Alter it only if
+   your SSH server node is not the same as HTTP node. Do not set this variable
+   if `PROTOCOL` is set to `unix`.
+- `DISABLE_SSH`: **false**: Disable SSH feature when it's not available.
+- `START_SSH_SERVER`: **false**: When enabled, use the built-in SSH server.
+- `SSH_DOMAIN`: **%(DOMAIN)s**: Domain name of this server, used for displayed clone URL.
+- `SSH_PORT`: **22**: SSH port displayed in clone URL.
+- `SSH_LISTEN_HOST`: **0.0.0.0**: Listen address for the built-in SSH server.
+- `SSH_LISTEN_PORT`: **%(SSH\_PORT)s**: Port for the built-in SSH server.
+- `OFFLINE_MODE`: **false**: Disables use of CDN for static files and Gravatar for profile pictures.
+- `DISABLE_ROUTER_LOG`: **false**: Mute printing of the router log.
+- `CERT_FILE`: **https/cert.pem**: Cert file path used for HTTPS. From 1.11 paths are relative to `CUSTOM_PATH`.
+- `KEY_FILE`: **https/key.pem**: Key file path used for HTTPS. From 1.11 paths are relative to `CUSTOM_PATH`.
+- `STATIC_ROOT_PATH`: **./**: Upper level of template and static files path.
+- `STATIC_CACHE_TIME`: **6h**: Web browser cache time for static resources on `custom/`, `public/` and all uploaded avatars.
+- `ENABLE_GZIP`: **false**: Enables application-level GZIP support.
+- `LANDING_PAGE`: **home**: Landing page for unauthenticated users \[home, explore, organizations, login\].
+- `LFS_START_SERVER`: **false**: Enables git-lfs support.
+- `LFS_CONTENT_PATH`: **./data/lfs**: Where to store LFS files.
+- `LFS_JWT_SECRET`: **\<empty\>**: LFS authentication secret, change this a unique string.
+- `LFS_HTTP_AUTH_EXPIRY`: **20m**: LFS authentication validity period in time.Duration, pushes taking longer than this may fail.
+- `LFS_MAX_FILE_SIZE`: **0**: Maximum allowed LFS file size in bytes (Set to 0 for no limit).
+- `LFS_LOCK_PAGING_NUM`: **50**: Maximum number of LFS Locks returned per page.
+- `REDIRECT_OTHER_PORT`: **false**: If true and `PROTOCOL` is https, allows redirecting http requests on `PORT_TO_REDIRECT` to the https port Gitea listens on.
+- `PORT_TO_REDIRECT`: **80**: Port for the http redirection service to listen on. Used when `REDIRECT_OTHER_PORT` is true.
+- `ENABLE_LETSENCRYPT`: **false**: If enabled you must set `DOMAIN` to valid internet facing domain (ensure DNS is set and port 80 is accessible by letsencrypt validation server).
+   By using Lets Encrypt **you must consent** to their [terms of service](https://letsencrypt.org/documents/LE-SA-v1.2-November-15-2017.pdf).
+- `LETSENCRYPT_ACCEPTTOS`: **false**: This is an explicit check that you accept the terms of service for Let's Encrypt.
+- `LETSENCRYPT_DIRECTORY`: **https**: Directory that Letsencrypt will use to cache information such as certs and private keys.
+- `LETSENCRYPT_EMAIL`: **email@example.com**: Email used by Letsencrypt to notify about problems with issued certificates. (No default)
+- `ALLOW_GRACEFUL_RESTARTS`: **true**: Perform a graceful restart on SIGHUP
+- `GRACEFUL_HAMMER_TIME`: **60s**: After a restart the parent process will stop accepting new connections and will allow requests to finish before stopping. Shutdown will be forced if it takes longer than this time.
+- `STARTUP_TIMEOUT`: **0**: Shutsdown the server if startup takes longer than the provided time. On Windows setting this sends a waithint to the SVC host to tell the SVC host startup may take some time. Please note startup is determined by the opening of the listeners - HTTP/HTTPS/SSH. Indexers may take longer to startup and can have their own timeouts.
+
+## Database (`database`)
+
+- `DB_TYPE`: **mysql**: The database type in use \[mysql, postgres, mssql, sqlite3\].
+- `HOST`: **127.0.0.1:3306**: Database host address and port or absolute path for unix socket \[mysql, postgres\] (ex: /var/run/mysqld/mysqld.sock).
+- `NAME`: **gitea**: Database name.
+- `USER`: **root**: Database username.
+- `PASSWD`: **\<empty\>**: Database user password. Use \`your password\` for quoting if you use special characters in the password.
+- `SCHEMA`: **\<empty\>**: For PostgreSQL only, schema to use if different from "public". The schema must exist beforehand,
+  the user must have creation privileges on it, and the user search path must be set to the look into the schema first 
+  (e.g. `ALTER USER user SET SEARCH_PATH = schema_name,"$user",public;`).
+- `SSL_MODE`: **disable**: SSL/TLS encryption mode for connecting to the database. This option is only applied for PostgreSQL and MySQL.
+  - Valid values for MySQL:
+     - `true`: Enable TLS with verification of the database server certificate against its root certificate. When selecting this option make sure that the root certificate required to validate the database server certificate (e.g. the CA certificate) is on the system certificate store of both the database and Gitea servers. See your system documentation for instructions on how to add a CA certificate to the certificate store.
+     - `false`: Disable TLS.
+     - `disable`: Alias for `false`, for compatibility with PostgreSQL.
+     - `skip-verify`: Enable TLS without database server certificate verification. Use this option if you have self-signed or invalid certificate on the database server.
+     - `prefer`: Enable TLS with fallback to non-TLS connection.
+  - Valid values for PostgreSQL:
+     - `disable`: Disable TLS.
+     - `require`: Enable TLS without any verifications.
+     - `verify-ca`: Enable TLS with verification of the database server certificate against its root certificate.
+     - `verify-full`: Enable TLS and verify the database server name matches the given certificate in either the `Common Name` or `Subject Alternative Name` fields.
+- `CHARSET`: **utf8**: For MySQL only, either "utf8" or "utf8mb4", default is "utf8". NOTICE: for "utf8mb4" you must use MySQL InnoDB > 5.6. Gitea is unable to check this.
+- `PATH`: **data/gitea.db**: For SQLite3 only, the database file path.
+- `LOG_SQL`: **true**: Log the executed SQL.
+- `DB_RETRIES`: **10**: How many ORM init / DB connect attempts allowed.
+- `DB_RETRY_BACKOFF`: **3s**: time.Duration to wait before trying another ORM init / DB connect attempt, if failure occured.
+- `MAX_OPEN_CONNS` **0**: Database maximum open connections - default is 0, meaning there is no limit.
+- `MAX_IDLE_CONNS` **2**: Max idle database connections on connnection pool, default is 2 - this will be capped to `MAX_OPEN_CONNS`.
+- `CONN_MAX_LIFETIME` **0 or 3s**: Sets the maximum amount of time a DB connection may be reused - default is 0, meaning there is no limit (except on MySQL where it is 3s - see #6804 & #7071).
+  
+Please see #8540 & #8273 for further discussion of the appropriate values for `MAX_OPEN_CONNS`, `MAX_IDLE_CONNS` & `CONN_MAX_LIFETIME` and their
+relation to port exhaustion.
+
+## Indexer (`indexer`)
+
+- `ISSUE_INDEXER_TYPE`: **bleve**: Issue indexer type, currently supported: `bleve`, `db` or `elasticsearch`.
+- `ISSUE_INDEXER_CONN_STR`: ****: Issue indexer connection string, available when ISSUE_INDEXER_TYPE is elasticsearch. i.e. http://elastic:changeme@localhost:9200
+- `ISSUE_INDEXER_NAME`: **gitea_issues**: Issue indexer name, available when ISSUE_INDEXER_TYPE is elasticsearch
+- `ISSUE_INDEXER_PATH`: **indexers/issues.bleve**: Index file used for issue search; available when ISSUE_INDEXER_TYPE is bleve and elasticsearch.
+- The next 4 configuration values are deprecated and should be set in `queue.issue_indexer` however are kept for backwards compatibility:
+- `ISSUE_INDEXER_QUEUE_TYPE`: **levelqueue**: Issue indexer queue, currently supports:`channel`, `levelqueue`, `redis`.
+- `ISSUE_INDEXER_QUEUE_DIR`: **indexers/issues.queue**: When `ISSUE_INDEXER_QUEUE_TYPE` is `levelqueue`, this will be the queue will be saved path.
+- `ISSUE_INDEXER_QUEUE_CONN_STR`: **addrs=127.0.0.1:6379 db=0**: When `ISSUE_INDEXER_QUEUE_TYPE` is `redis`, this will store the redis connection string.
+- `ISSUE_INDEXER_QUEUE_BATCH_NUMBER`: **20**: Batch queue number.
+
+- `REPO_INDEXER_ENABLED`: **false**: Enables code search (uses a lot of disk space, about 6 times more than the repository size).
+- `REPO_INDEXER_PATH`: **indexers/repos.bleve**: Index file used for code search.
+- `REPO_INDEXER_INCLUDE`: **empty**: A comma separated list of glob patterns (see https://github.com/gobwas/glob) to **include** in the index. Use `**.txt` to match any files with .txt extension. An empty list means include all files.
+- `REPO_INDEXER_EXCLUDE`: **empty**: A comma separated list of glob patterns (see https://github.com/gobwas/glob) to **exclude** from the index. Files that match this list will not be indexed, even if they match in `REPO_INDEXER_INCLUDE`.
+- `REPO_INDEXER_EXCLUDE_VENDORED`: **true**: Exclude vendored files from index.
+- `UPDATE_BUFFER_LEN`: **20**: Buffer length of index request.
+- `MAX_FILE_SIZE`: **1048576**: Maximum size in bytes of files to be indexed.
+- `STARTUP_TIMEOUT`: **30s**: If the indexer takes longer than this timeout to start - fail. (This timeout will be added to the hammer time above for child processes - as bleve will not start until the previous parent is shutdown.) Set to zero to never timeout.
+
+## Queue (`queue` and `queue.*`)
+
+- `TYPE`: **persistable-channel**: General queue type, currently support: `persistable-channel`, `channel`, `level`, `redis`, `dummy`
+- `DATADIR`: **queues/**: Base DataDir for storing persistent and level queues. `DATADIR` for inidividual queues can be set in `queue.name` sections but will default to `DATADIR/`**`name`**.
+- `LENGTH`: **20**: Maximal queue size before channel queues block
+- `BATCH_LENGTH`: **20**: Batch data before passing to the handler
+- `CONN_STR`: **addrs=127.0.0.1:6379 db=0**: Connection string for the redis queue type.
+- `QUEUE_NAME`: **_queue**: The suffix for default redis queue name. Individual queues will default to **`name`**`QUEUE_NAME` but can be overriden in the specific `queue.name` section.
+- `SET_NAME`: **_unique**: The suffix that will added to the default redis
+set name for unique queues. Individual queues will default to
+**`name`**`QUEUE_NAME`_`SET_NAME`_ but can be overridden in the specific
+`queue.name` section.
+- `WRAP_IF_NECESSARY`: **true**: Will wrap queues with a timeoutable queue if the selected queue is not ready to be created - (Only relevant for the level queue.)
+- `MAX_ATTEMPTS`: **10**: Maximum number of attempts to create the wrapped queue
+- `TIMEOUT`: **GRACEFUL_HAMMER_TIME + 30s**: Timeout the creation of the wrapped queue if it takes longer than this to create.
+- Queues by default come with a dynamically scaling worker pool. The following settings configure this:
+- `WORKERS`: **1**: Number of initial workers for the queue.
+- `MAX_WORKERS`: **10**: Maximum number of worker go-routines for the queue.
+- `BLOCK_TIMEOUT`: **1s**: If the queue blocks for this time, boost the number of workers - the `BLOCK_TIMEOUT` will then be doubled before boosting again whilst the boost is ongoing.
+- `BOOST_TIMEOUT`: **5m**: Boost workers will timeout after this long.
+- `BOOST_WORKERS`: **5**: This many workers will be added to the worker pool if there is a boost.
+
+## Admin (`admin`)
+- `DEFAULT_EMAIL_NOTIFICATIONS`: **enabled**: Default configuration for email notifications for users (user configurable). Options: enabled, onmention, disabled
+
+## Security (`security`)
+
+- `INSTALL_LOCK`: **false**: Disallow access to the install page.
+- `SECRET_KEY`: **\<random at every install\>**: Global secret key. This should be changed.
+- `LOGIN_REMEMBER_DAYS`: **7**: Cookie lifetime, in days.
+- `COOKIE_USERNAME`: **gitea\_awesome**: Name of the cookie used to store the current username.
+- `COOKIE_REMEMBER_NAME`: **gitea\_incredible**: Name of cookie used to store authentication
+   information.
+- `REVERSE_PROXY_AUTHENTICATION_USER`: **X-WEBAUTH-USER**: Header name for reverse proxy
+   authentication.
+- `REVERSE_PROXY_AUTHENTICATION_EMAIL`: **X-WEBAUTH-EMAIL**: Header name for reverse proxy
+   authentication provided email.
+- `DISABLE_GIT_HOOKS`: **false**: Set to `true` to prevent all users (including admin) from creating custom
+   git hooks.
+- `ONLY_ALLOW_PUSH_IF_GITEA_ENVIRONMENT_SET`: **true**: Set to `false` to allow local users to push to gitea-repositories without setting up the Gitea environment. This is not recommended and if you want local users to push to gitea repositories you should set the environment appropriately.
+- `IMPORT_LOCAL_PATHS`: **false**: Set to `false` to prevent all users (including admin) from importing local path on server.
+- `INTERNAL_TOKEN`: **\<random at every install if no uri set\>**: Secret used to validate communication within Gitea binary.
+- `INTERNAL_TOKEN_URI`: **<empty>**: Instead of defining internal token in the configuration, this configuration option can be used to give Gitea a path to a file that contains the internal token (example value: `file:/etc/gitea/internal_token`)
+- `PASSWORD_HASH_ALGO`: **pbkdf2**: The hash algorithm to use \[pbkdf2, argon2, scrypt, bcrypt\].
+- `CSRF_COOKIE_HTTP_ONLY`: **true**: Set false to allow JavaScript to read CSRF cookie.
+- `PASSWORD_COMPLEXITY`: **lower,upper,digit,spec**: Comma separated list of character classes required to pass minimum complexity. If left empty or no valid values are specified, the default values will be used. Possible values are: 
+    - lower - use one or more lower latin characters
+    - upper - use one or more upper latin characters
+    - digit - use one or more digits
+    - spec - use one or more special characters as ``!"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~``
+    - off - do not check password complexity
+
+## OpenID (`openid`)
+
+- `ENABLE_OPENID_SIGNIN`: **false**: Allow authentication in via OpenID.
+- `ENABLE_OPENID_SIGNUP`: **! DISABLE\_REGISTRATION**: Allow registering via OpenID.
+- `WHITELISTED_URIS`: **\<empty\>**: If non-empty, list of POSIX regex patterns matching
+   OpenID URI's to permit.
+- `BLACKLISTED_URIS`: **\<empty\>**: If non-empty, list of POSIX regex patterns matching
+   OpenID URI's to block.
+
+## Service (`service`)
+
+- `ACTIVE_CODE_LIVE_MINUTES`: **180**: Time limit (min) to confirm account/email registration.
+- `RESET_PASSWD_CODE_LIVE_MINUTES`: **180**: Time limit (min) to confirm forgot password reset
+   process.
+- `REGISTER_EMAIL_CONFIRM`: **false**: Enable this to ask for mail confirmation of registration.
+   Requires `Mailer` to be enabled.
+- `DISABLE_REGISTRATION`: **false**: Disable registration, after which only admin can create
+   accounts for users.
+- `REQUIRE_EXTERNAL_REGISTRATION_PASSWORD`: **false**: Enable this to force externally created
+   accounts (via GitHub, OpenID Connect, etc) to create a password. Warning: enabling this will
+   decrease security, so you should only enable it if you know what you're doing.
+- `REQUIRE_SIGNIN_VIEW`: **false**: Enable this to force users to log in to view any page or to use API.
+- `ENABLE_NOTIFY_MAIL`: **false**: Enable this to send e-mail to watchers of a repository when
+   something happens, like creating issues. Requires `Mailer` to be enabled.
+- `ENABLE_BASIC_AUTHENTICATION`: **true**: Disable this to disallow authenticaton using HTTP
+   BASIC and the user's password. Please note if you disable this you will not be able to access the
+   tokens API endpoints using a password. Further, this only disables BASIC authentication using the
+   password - not tokens or OAuth Basic.
+- `ENABLE_REVERSE_PROXY_AUTHENTICATION`: **false**: Enable this to allow reverse proxy authentication.
+- `ENABLE_REVERSE_PROXY_AUTO_REGISTRATION`: **false**: Enable this to allow auto-registration
+   for reverse authentication.
+- `ENABLE_REVERSE_PROXY_EMAIL`: **false**: Enable this to allow to auto-registration with a
+   provided email rather than a generated email.
+- `ENABLE_CAPTCHA`: **false**: Enable this to use captcha validation for registration.
+- `REQUIRE_EXTERNAL_REGISTRATION_CAPTCHA`: **false**: Enable this to force captcha validation
+   even for External Accounts (i.e. GitHub, OpenID Connect, etc). You must `ENABLE_CAPTCHA` also.
+- `CAPTCHA_TYPE`: **image**: \[image, recaptcha\]
+- `RECAPTCHA_SECRET`: **""**: Go to https://www.google.com/recaptcha/admin to get a secret for recaptcha.
+- `RECAPTCHA_SITEKEY`: **""**: Go to https://www.google.com/recaptcha/admin to get a sitekey for recaptcha.
+- `RECAPTCHA_URL`: **https://www.google.com/recaptcha/**: Set the recaptcha url - allows the use of recaptcha net.
+- `DEFAULT_ENABLE_DEPENDENCIES`: **true**: Enable this to have dependencies enabled by default.
+- `ALLOW_CROSS_REPOSITORY_DEPENDENCIES` : **true** Enable this to allow dependencies on issues from any repository where the user is granted access.
+- `ENABLE_USER_HEATMAP`: **true**: Enable this to display the heatmap on users profiles.
+- `EMAIL_DOMAIN_WHITELIST`: **\<empty\>**: If non-empty, list of domain names that can only be used to register
+  on this instance.
+- `SHOW_REGISTRATION_BUTTON`: **! DISABLE\_REGISTRATION**: Show Registration Button
+- `SHOW_MILESTONES_DASHBOARD_PAGE`: **true** Enable this to show the milestones dashboard page - a view of all the user's milestones
+- `AUTO_WATCH_NEW_REPOS`: **true**: Enable this to let all organisation users watch new repos when they are created
+- `AUTO_WATCH_ON_CHANGES`: **false**: Enable this to make users watch a repository after their first commit to it
+- `DEFAULT_ORG_VISIBILITY`: **public**: Set default visibility mode for organisations, either "public", "limited" or "private".
+- `DEFAULT_ORG_MEMBER_VISIBLE`: **false** True will make the membership of the users visible when added to the organisation.
+- `ALLOW_ONLY_EXTERNAL_REGISTRATION`: **false** Set to true to force registration only using third-party services.
+- `NO_REPLY_ADDRESS`: **DOMAIN** Default value for the domain part of the user's email address in the git log if he has set KeepEmailPrivate to true. 
+  The user's email will be replaced with a concatenation of the user name in lower case, "@" and NO_REPLY_ADDRESS.
+
+## Webhook (`webhook`)
+
+- `QUEUE_LENGTH`: **1000**: Hook task queue length. Use caution when editing this value.
+- `DELIVER_TIMEOUT`: **5**: Delivery timeout (sec) for shooting webhooks.
+- `SKIP_TLS_VERIFY`: **false**: Allow insecure certification.
+- `PAGING_NUM`: **10**: Number of webhook history events that are shown in one page.
+- `PROXY_URL`: ****: Proxy server URL, support http://, https//, socks://, blank will follow environment http_proxy/https_proxy
+- `PROXY_HOSTS`: ****: Comma separated list of host names requiring proxy. Glob patterns (*) are accepted; use ** to match all hosts.
+
+## Mailer (`mailer`)
+
+- `ENABLED`: **false**: Enable to use a mail service.
+- `DISABLE_HELO`: **\<empty\>**: Disable HELO operation.
+- `HELO_HOSTNAME`: **\<empty\>**: Custom hostname for HELO operation.
+- `HOST`: **\<empty\>**: SMTP mail host address and port (example: smtp.gitea.io:587).
+- `FROM`: **\<empty\>**: Mail from address, RFC 5322. This can be just an email address, or
+   the "Name" \<email@example.com\> format.
+- `USER`: **\<empty\>**: Username of mailing user (usually the sender's e-mail address).
+- `PASSWD`: **\<empty\>**: Password of mailing user.  Use \`your password\` for quoting if you use special characters in the password.
+- `SKIP_VERIFY`: **\<empty\>**: Do not verify the self-signed certificates.
+   - **Note:** Gitea only supports SMTP with STARTTLS.
+- `SUBJECT_PREFIX`: **\<empty\>**: Prefix to be placed before e-mail subject lines.
+- `MAILER_TYPE`: **smtp**: \[smtp, sendmail, dummy\]
+   - **smtp** Use SMTP to send mail
+   - **sendmail** Use the operating system's `sendmail` command instead of SMTP.
+   This is common on linux systems.
+   - **dummy** Send email messages to the log as a testing phase.
+   - Note that enabling sendmail will ignore all other `mailer` settings except `ENABLED`,
+     `FROM`, `SUBJECT_PREFIX` and `SENDMAIL_PATH`.
+   - Enabling dummy will ignore all settings except `ENABLED`, `SUBJECT_PREFIX` and `FROM`.
+- `SENDMAIL_PATH`: **sendmail**: The location of sendmail on the operating system (can be
+   command or full path).
+- `SENDMAIL_TIMEOUT`: **5m**: default timeout for sending email through sendmail
+- ``IS_TLS_ENABLED`` :  **false** : Decide if SMTP connections should use TLS.
+
+## Cache (`cache`)
+
+- `ENABLED`: **true**: Enable the cache.
+- `ADAPTER`: **memory**: Cache engine adapter, either `memory`, `redis`, or `memcache`.
+- `INTERVAL`: **60**: Garbage Collection interval (sec), for memory cache only.
+- `HOST`: **\<empty\>**: Connection string for `redis` and `memcache`.
+   - Redis: `network=tcp,addr=127.0.0.1:6379,password=macaron,db=0,pool_size=100,idle_timeout=180`
+   - Memcache: `127.0.0.1:9090;127.0.0.1:9091`
+- `ITEM_TTL`: **16h**: Time to keep items in cache if not used, Setting it to 0 disables caching.
+
+## Cache - LastCommitCache settings (`cache.last_commit`)
+
+- `ENABLED`: **true**: Enable the cache.
+- `ITEM_TTL`: **8760h**: Time to keep items in cache if not used, Setting it to 0 disables caching.
+- `COMMITS_COUNT`: **1000**: Only enable the cache when repository's commits count great than.
+
+## Session (`session`)
+
+- `PROVIDER`: **memory**: Session engine provider \[memory, file, redis, mysql, couchbase, memcache, nodb, postgres\].
+- `PROVIDER_CONFIG`: **data/sessions**: For file, the root path; for others, the connection string.
+- `COOKIE_SECURE`: **false**: Enable this to force using HTTPS for all session access.
+- `COOKIE_NAME`: **i\_like\_gitea**: The name of the cookie used for the session ID.
+- `GC_INTERVAL_TIME`: **86400**: GC interval in seconds.
+
+## Picture (`picture`)
+
+- `GRAVATAR_SOURCE`: **gravatar**: Can be `gravatar`, `duoshuo` or anything like
+   `http://cn.gravatar.com/avatar/`.
+- `DISABLE_GRAVATAR`: **false**: Enable this to use local avatars only.
+- `ENABLE_FEDERATED_AVATAR`: **false**: Enable support for federated avatars (see
+   [http://www.libravatar.org](http://www.libravatar.org)).
+- `AVATAR_UPLOAD_PATH`: **data/avatars**: Path to store user avatar image files.
+- `REPOSITORY_AVATAR_UPLOAD_PATH`: **data/repo-avatars**: Path to store repository avatar image files.
+- `REPOSITORY_AVATAR_FALLBACK`: **none**: How Gitea deals with missing repository avatars
+  - none = no avatar will be displayed
+  - random = random avatar will be generated
+  - image = default image will be used (which is set in `REPOSITORY_AVATAR_DEFAULT_IMAGE`)
+- `REPOSITORY_AVATAR_FALLBACK_IMAGE`: **/img/repo_default.png**: Image used as default repository avatar (if `REPOSITORY_AVATAR_FALLBACK` is set to image and none was uploaded)
+- `AVATAR_MAX_WIDTH`: **4096**: Maximum avatar image width in pixels.
+- `AVATAR_MAX_HEIGHT`: **3072**: Maximum avatar image height in pixels.
+- `AVATAR_MAX_FILE_SIZE`: **1048576** (1Mb): Maximum avatar image file size in bytes.
+
+## Attachment (`attachment`)
+
+- `ENABLED`: **true**: Enable this to allow uploading attachments.
+- `PATH`: **data/attachments**: Path to store attachments.
+- `ALLOWED_TYPES`: **see app.ini.sample**: Allowed MIME types, e.g. `image/jpeg|image/png`.
+   Use `*/*` for all types.
+- `MAX_SIZE`: **4**: Maximum size (MB).
+- `MAX_FILES`: **5**: Maximum number of attachments that can be uploaded at once.
+
+## Log (`log`)
+
+- `ROOT_PATH`: **\<empty\>**: Root path for log files.
+- `MODE`: **console**: Logging mode. For multiple modes, use a comma to separate values. You can configure each mode in per mode log subsections `\[log.modename\]`. By default the file mode will log to `$ROOT_PATH/gitea.log`.
+- `LEVEL`: **Info**: General log level. \[Trace, Debug, Info, Warn, Error, Critical, Fatal, None\]
+- `STACKTRACE_LEVEL`: **None**: Default log level at which to log create stack traces. \[Trace, Debug, Info, Warn, Error, Critical, Fatal, None\]
+- `REDIRECT_MACARON_LOG`: **false**: Redirects the Macaron log to its own logger or the default logger.
+- `MACARON`: **file**: Logging mode for the macaron logger, use a comma to separate values. Configure each mode in per mode log subsections `\[log.modename.macaron\]`. By default the file mode will log to `$ROOT_PATH/macaron.log`. (If you set this to `,` it will log to default gitea logger.)
+- `ROUTER_LOG_LEVEL`: **Info**: The log level that the router should log at. (If you are setting the access log, its recommended to place this at Debug.)
+- `ROUTER`: **console**: The mode or name of the log the router should log to. (If you set this to `,` it will log to default gitea logger.)
+NB: You must `REDIRECT_MACARON_LOG` and have `DISABLE_ROUTER_LOG` set to `false` for this option to take effect. Configure each mode in per mode log subsections `\[log.modename.router\]`.
+- `ENABLE_ACCESS_LOG`: **false**: Creates an access.log in NCSA common log format, or as per the following template
+- `ACCESS`: **file**: Logging mode for the access logger, use a comma to separate values. Configure each mode in per mode log subsections `\[log.modename.access\]`. By default the file mode will log to `$ROOT_PATH/access.log`. (If you set this to `,` it will log to the default gitea logger.)
+- `ACCESS_LOG_TEMPLATE`: **`{{.Ctx.RemoteAddr}} - {{.Identity}} {{.Start.Format "[02/Jan/2006:15:04:05 -0700]" }} "{{.Ctx.Req.Method}} {{.Ctx.Req.URL.RequestURI}} {{.Ctx.Req.Proto}}" {{.ResponseWriter.Status}} {{.ResponseWriter.Size}} "{{.Ctx.Req.Referer}}\" \"{{.Ctx.Req.UserAgent}}"`**: Sets the template used to create the access log.
+  - The following variables are available:
+  - `Ctx`: the `macaron.Context` of the request.
+  - `Identity`: the SignedUserName or `"-"` if not logged in.
+  - `Start`: the start time of the request.
+  - `ResponseWriter`: the responseWriter from the request.
+  - You must be very careful to ensure that this template does not throw errors or panics as this template runs outside of the panic/recovery script.
+- `ENABLE_XORM_LOG`: **true**: Set whether to perform XORM logging. Please note SQL statement logging can be disabled by setting `LOG_SQL` to false in the `[database]` section.
+
+### Log subsections (`log.name`, `log.name.*`)
+
+- `LEVEL`: **log.LEVEL**: Sets the log-level of this sublogger. Defaults to the `LEVEL` set in the global `[log]` section.
+- `STACKTRACE_LEVEL`: **log.STACKTRACE_LEVEL**: Sets the log level at which to log stack traces.
+- `MODE`: **name**: Sets the mode of this sublogger - Defaults to the provided subsection name. This allows you to have two different file loggers at different levels.
+- `EXPRESSION`: **""**: A regular expression to match either the function name, file or message. Defaults to empty. Only log messages that match the expression will be saved in the logger.
+- `FLAGS`: **stdflags**: A comma separated string representing the log flags. Defaults to `stdflags` which represents the prefix: `2009/01/23 01:23:23 ...a/b/c/d.go:23:runtime.Caller() [I]: message`. `none` means don't prefix log lines. See `modules/log/base.go` for more information.
+- `PREFIX`: **""**: An additional prefix for every log line in this logger. Defaults to empty.
+- `COLORIZE`: **false**: Colorize the log lines by default
+
+### Console log mode (`log.console`, `log.console.*`, or `MODE=console`)
+
+- For the console logger `COLORIZE` will default to `true` if not on windows or the terminal is determined to be able to color.
+- `STDERR`: **false**: Use Stderr instead of Stdout.
+
+### File log mode (`log.file`, `log.file.*` or `MODE=file`)
+
+- `FILE_NAME`: Set the file name for this logger. Defaults as described above. If relative will be relative to the `ROOT_PATH`
+- `LOG_ROTATE`: **true**: Rotate the log files.
+- `MAX_SIZE_SHIFT`: **28**: Maximum size shift of a single file, 28 represents 256Mb.
+- `DAILY_ROTATE`: **true**: Rotate logs daily.
+- `MAX_DAYS`: **7**: Delete the log file after n days
+- `COMPRESS`: **true**: Compress old log files by default with gzip
+- `COMPRESSION_LEVEL`: **-1**: Compression level
+
+### Conn log mode (`log.conn`, `log.conn.*` or `MODE=conn`)
+
+- `RECONNECT_ON_MSG`: **false**: Reconnect host for every single message.
+- `RECONNECT`: **false**: Try to reconnect when connection is lost.
+- `PROTOCOL`: **tcp**: Set the protocol, either "tcp", "unix" or "udp".
+- `ADDR`: **:7020**: Sets the address to connect to.
+
+### SMTP log mode (`log.smtp`, `log.smtp.*` or `MODE=smtp`)
+
+- `USER`: User email address to send from.
+- `PASSWD`: Password for the smtp server.
+- `HOST`: **127.0.0.1:25**: The SMTP host to connect to.
+- `RECEIVERS`: Email addresses to send to.
+- `SUBJECT`: **Diagnostic message from Gitea**
+
+## Cron (`cron`)
+
+- `ENABLED`: **true**: Run cron tasks periodically.
+- `RUN_AT_START`: **false**: Run cron tasks at application start-up.
+
+### Cron - Cleanup old repository archives (`cron.archive_cleanup`)
+
+- `ENABLED`: **true**: Enable service.
+- `RUN_AT_START`: **true**: Run tasks at start up time (if ENABLED).
+- `SCHEDULE`: **@every 24h**: Cron syntax for scheduling repository archive cleanup, e.g. `@every 1h`.
+- `OLDER_THAN`: **24h**: Archives created more than `OLDER_THAN` ago are subject to deletion, e.g. `12h`.
+
+### Cron - Update Mirrors (`cron.update_mirrors`)
+
+- `SCHEDULE`: **@every 10m**: Cron syntax for scheduling update mirrors, e.g. `@every 3h`.
+
+### Cron - Repository Health Check (`cron.repo_health_check`)
+
+- `SCHEDULE`: **@every 24h**: Cron syntax for scheduling repository health check.
+- `TIMEOUT`: **60s**: Time duration syntax for health check execution timeout.
+- `ARGS`: **\<empty\>**: Arguments for command `git fsck`, e.g. `--unreachable --tags`. See more on http://git-scm.com/docs/git-fsck
+
+### Cron - Repository Statistics Check (`cron.check_repo_stats`)
+
+- `RUN_AT_START`: **true**: Run repository statistics check at start time.
+- `SCHEDULE`: **@every 24h**: Cron syntax for scheduling repository statistics check.
+
+### Cron - Update Migration Poster ID (`cron.update_migration_poster_id`)
+
+- `SCHEDULE`: **@every 24h** : Interval as a duration between each synchronization, it will always attempt synchronization when the instance starts.
+
+## Git (`git`)
+
+- `PATH`: **""**: The path of git executable. If empty, Gitea searches through the PATH environment.
+- `MAX_GIT_DIFF_LINES`: **100**: Max number of lines allowed of a single file in diff view.
+- `MAX_GIT_DIFF_LINE_CHARACTERS`: **5000**: Max character count per line highlighted in diff view.
+- `MAX_GIT_DIFF_FILES`: **100**: Max number of files shown in diff view.
+- `GC_ARGS`: **\<empty\>**: Arguments for command `git gc`, e.g. `--aggressive --auto`. See more on http://git-scm.com/docs/git-gc/
+- `ENABLE_AUTO_GIT_WIRE_PROTOCOL`: **true**: If use git wire protocol version 2 when git version >= 2.18, default is true, set to false when you always want git wire protocol version 1
+- `PULL_REQUEST_PUSH_MESSAGE`: **true**: Respond to pushes to a non-default branch with a URL for creating a Pull Request (if the repository has them enabled)
+- `VERBOSE_PUSH`: **true**: Print status information about pushes as they are being processed.
+- `VERBOSE_PUSH_DELAY`: **5s**: Only print verbose information if push takes longer than this delay.
+
+## Git - Timeout settings (`git.timeout`)
+- `DEFAUlT`: **360**: Git operations default timeout seconds.
+- `MIGRATE`: **600**: Migrate external repositories timeout seconds.
+- `MIRROR`: **300**: Mirror external repositories timeout seconds.
+- `CLONE`: **300**: Git clone from internal repositories timeout seconds.
+- `PULL`: **300**: Git pull from internal repositories timeout seconds.
+- `GC`: **60**: Git repository GC timeout seconds.
+
+## Metrics (`metrics`)
+
+- `ENABLED`: **false**: Enables /metrics endpoint for prometheus.
+- `TOKEN`: **\<empty\>**: You need to specify the token, if you want to include in the authorization the metrics . The same token need to be used in prometheus parameters `bearer_token` or `bearer_token_file`.
+
+## API (`api`)
+
+- `ENABLE_SWAGGER`: **true**: Enables /api/swagger, /api/v1/swagger etc. endpoints. True or false; default is true.
+- `MAX_RESPONSE_ITEMS`: **50**: Max number of items in a page.
+- `DEFAULT_PAGING_NUM`: **30**: Default paging number of API.
+- `DEFAULT_GIT_TREES_PER_PAGE`: **1000**: Default and maximum number of items per page for git trees API.
+- `DEFAULT_MAX_BLOB_SIZE`: **10485760**: Default max size of a blob that can be return by the blobs API.
+
+## OAuth2 (`oauth2`)
+
+- `ENABLE`: **true**: Enables OAuth2 provider.
+- `ACCESS_TOKEN_EXPIRATION_TIME`: **3600**: Lifetime of an OAuth2 access token in seconds
+- `REFRESH_TOKEN_EXPIRATION_TIME`: **730**: Lifetime of an OAuth2 access token in hours
+- `INVALIDATE_REFRESH_TOKEN`: **false**: Check if refresh token got already used
+- `JWT_SECRET`: **\<empty\>**: OAuth2 authentication secret for access and refresh tokens, change this a unique string.
+- `MAX_TOKEN_LENGTH`: **32767**: Maximum length of token/cookie to accept from OAuth2 provider
+
+## i18n (`i18n`)
+
+- `LANGS`: **en-US,zh-CN,zh-HK,zh-TW,de-DE,fr-FR,nl-NL,lv-LV,ru-RU,ja-JP,es-ES,pt-BR,pl-PL,bg-BG,it-IT,fi-FI,tr-TR,cs-CZ,sr-SP,sv-SE,ko-KR**: List of locales shown in language selector
+- `NAMES`: **English,简体中文,繁體中文（香港）,繁體中文（台灣）,Deutsch,français,Nederlands,latviešu,русский,日本語,español,português do Brasil,polski,български,italiano,suomi,Türkçe,čeština,српски,svenska,한국어**: Visible names corresponding to the locales
+
+### i18n - Datepicker Language (`i18n.datelang`)
+Maps locales to the languages used by the datepicker plugin
+
+- `en-US`: **en**
+- `zh-CN`: **zh**
+- `zh-HK`: **zh-HK**
+- `zh-TW`: **zh-TW**
+- `de-DE`: **de**
+- `fr-FR`: **fr**
+- `nl-NL`: **nl**
+- `lv-LV`: **lv**
+- `ru-RU`: **ru**
+- `ja-JP`: **ja**
+- `es-ES`: **es**
+- `pt-BR`: **pt-BR**
+- `pl-PL`: **pl**
+- `bg-BG`: **bg**
+- `it-IT`: **it**
+- `fi-FI`: **fi**
+- `tr-TR`: **tr**
+- `cs-CZ`: **cs-CZ**
+- `sr-SP`: **sr**
+- `sv-SE`: **sv**
+- `ko-KR`: **ko**
+
+## U2F (`U2F`)
+- `APP_ID`: **`ROOT_URL`**: Declares the facet of the application. Requires HTTPS.
+- `TRUSTED_FACETS`: List of additional facets which are trusted. This is not support by all browsers.
+
+## Markup (`markup`)
+
+Gitea can support Markup using external tools. The example below will add a markup named `asciidoc`.
+
+```ini
+[markup.asciidoc]
+ENABLED = true
+FILE_EXTENSIONS = .adoc,.asciidoc
+RENDER_COMMAND = "asciidoc --out-file=- -"
+IS_INPUT_FILE = false
+```
+
+- ENABLED: **false** Enable markup support; set to **true** to enable this renderer.
+- FILE\_EXTENSIONS: **\<empty\>** List of file extensions that should be rendered by an external
+   command. Multiple extentions needs a comma as splitter.
+- RENDER\_COMMAND: External command to render all matching extensions.
+- IS\_INPUT\_FILE: **false** Input is not a standard input but a file param followed `RENDER_COMMAND`.
+
+Two special environment variables are passed to the render command:
+- `GITEA_PREFIX_SRC`, which contains the current URL prefix in the `src` path tree. To be used as prefix for links.
+- `GITEA_PREFIX_RAW`, which contains the current URL prefix in the `raw` path tree. To be used as prefix for image paths.
+
+
+Gitea supports customizing the sanitization policy for rendered HTML. The example below will support KaTeX output from pandoc.
+
+```ini
+[markup.sanitizer.TeX]
+; Pandoc renders TeX segments as <span>s with the "math" class, optionally
+; with "inline" or "display" classes depending on context.
+ELEMENT = span
+ALLOW_ATTR = class
+REGEXP = ^\s*((math(\s+|$)|inline(\s+|$)|display(\s+|$)))+
+```
+
+ - `ELEMENT`: The element this policy applies to. Must be non-empty.
+ - `ALLOW_ATTR`: The attribute this policy allows. Must be non-empty.
+ - `REGEXP`: A regex to match the contents of the attribute against. Must be present but may be empty for unconditional whitelisting of this attribute.
+
+Multiple sanitisation rules can be defined by adding unique subsections, e.g. `[markup.sanitizer.TeX-2]`.
+
+## Time (`time`)
+
+- `FORMAT`: Time format to diplay on UI. i.e. RFC1123 or 2006-01-02 15:04:05
+- `DEFAULT_UI_LOCATION`: Default location of time on the UI, so that we can display correct user's time on UI. i.e. Shanghai/Asia
+
+## Task (`task`)
+
+Task queue configuration has been moved to `queue.task`. However, the below configuration values are kept for backwards compatibility:
+
+- `QUEUE_TYPE`: **channel**: Task queue type, could be `channel` or `redis`.
+- `QUEUE_LENGTH`: **1000**: Task queue length, available only when `QUEUE_TYPE` is `channel`.
+- `QUEUE_CONN_STR`: **addrs=127.0.0.1:6379 db=0**: Task queue connection string, available only when `QUEUE_TYPE` is `redis`. If redis needs a password, use `addrs=127.0.0.1:6379 password=123 db=0`.
+
+## Migrations (`migrations`)
+
+- `MAX_ATTEMPTS`: **3**: Max attempts per http/https request on migrations.
+- `RETRY_BACKOFF`: **3**: Backoff time per http/https request retry (seconds)
+
+## Other (`other`)
+
+- `SHOW_FOOTER_BRANDING`: **false**: Show Gitea branding in the footer.
+- `SHOW_FOOTER_VERSION`: **true**: Show Gitea version information in the footer.
+- `SHOW_FOOTER_TEMPLATE_LOAD_TIME`: **true**: Show time of template execution in the footer.
diff --git a/docs/content/doc/advanced/config-cheat-sheet.zh-cn.md b/docs/content/doc/advanced/config-cheat-sheet.zh-cn.md
index 082944c8a..9d9ac3884 100644
--- a/docs/content/doc/advanced/config-cheat-sheet.zh-cn.md
+++ b/docs/content/doc/advanced/config-cheat-sheet.zh-cn.md
@@ -98,8 +98,12 @@ menu:
 - `ISSUE_INDEXER_QUEUE_CONN_STR`: **addrs=127.0.0.1:6379 db=0**: 当 `ISSUE_INDEXER_QUEUE_TYPE` 为 `redis` 时，保存Redis队列的连接字符串。
 - `ISSUE_INDEXER_QUEUE_BATCH_NUMBER`: **20**: 队列处理中批量提交数量。
 
-- `REPO_INDEXER_ENABLED`: **false**: 是否启用代码搜索（启用后会占用比较大的磁盘空间）。
+- `REPO_INDEXER_ENABLED`: **false**: 是否启用代码搜索（启用后会占用比较大的磁盘空间，如果是bleve可能需要占用约6倍存储空间）。
+- `REPO_INDEXER_TYPE`: **bleve**: 代码搜索引擎类型，可以为 `bleve` 或者 `elasticsearch`。
 - `REPO_INDEXER_PATH`: **indexers/repos.bleve**: 用于代码搜索的索引文件路径。
+- `REPO_INDEXER_CONN_STR`: ****: 代码搜索引擎连接字符串，当 `REPO_INDEXER_TYPE` 为 `elasticsearch` 时有效。例如： http://elastic:changeme@localhost:9200
+- `REPO_INDEXER_NAME`: **gitea_codes**: 代码搜索引擎的名字，当 `REPO_INDEXER_TYPE` 为 `elasticsearch` 时有效。
+
 - `UPDATE_BUFFER_LEN`: **20**: 代码索引请求的缓冲区长度。
 - `MAX_FILE_SIZE`: **1048576**: 进行解析的源代码文件的最大长度，小于该值时才会索引。
 
diff --git a/elastic-code.patch b/elastic-code.patch
new file mode 100644
index 000000000..94cef6851
--- /dev/null
+++ b/elastic-code.patch
@@ -0,0 +1,1572 @@
+diff --git a/.drone.yml b/.drone.yml
+index ac8c92918..3b7e1b002 100644
+--- a/.drone.yml
++++ b/.drone.yml
+@@ -186,6 +186,7 @@ steps:
+       GOPROXY: off
+       TAGS: bindata
+       TEST_LDAP: 1
++      TEST_INDEXER_CODE_ES_URL: "http://elastic:changeme@elasticsearch:9200"
+       USE_REPO_TEST_DIR: 1
+     depends_on:
+       - build
+diff --git a/.drone.yml.orig b/.drone.yml.orig
+new file mode 100644
+index 000000000..ac8c92918
+--- /dev/null
++++ b/.drone.yml.orig
+@@ -0,0 +1,812 @@
++---
++kind: pipeline
++name: compliance
++
++platform:
++  os: linux
++  arch: arm64
++
++workspace:
++  base: /go
++  path: src/code.gitea.io/gitea
++
++steps:
++  - name: deps-frontend
++    pull: always
++    image: node:12
++    commands:
++      - make node_modules
++
++  - name: lint-frontend
++    pull: always
++    image: node:12
++    commands:
++      - make lint-frontend
++    depends_on: [deps-frontend]
++
++  - name: lint-backend
++    pull: always
++    image: golang:1.14
++    commands:
++      - make lint-backend
++    environment:
++      GOPROXY: https://goproxy.cn # proxy.golang.org is blocked in China, this proxy is not
++      GOSUMDB: sum.golang.org
++      TAGS: bindata sqlite sqlite_unlock_notify
++
++  - name: build-frontend
++    pull: always
++    image: node:10 # this step is kept at the lowest version of node that we support
++    commands:
++      - make frontend
++    depends_on: [lint-frontend]
++
++  - name: build-backend-no-gcc
++    pull: always
++    image: golang:1.12 # this step is kept as the lowest version of golang that we support
++    environment:
++      GO111MODULE: on
++      GOPROXY: off
++    commands:
++      - go build -mod=vendor -o gitea_no_gcc # test if build succeeds without the sqlite tag
++    depends_on: [lint-backend]
++
++  - name: build-backend-arm64
++    pull: always
++    image: golang:1.14
++    environment:
++      GO111MODULE: on
++      GOPROXY: off
++      GOOS: linux
++      GOARCH: arm64
++      TAGS: bindata
++    commands:
++      - make backend # test cross compile
++      - rm ./gitea # clean
++    depends_on: [lint-backend]
++
++  - name: build-backend-386
++    pull: always
++    image: golang:1.14
++    environment:
++      GO111MODULE: on
++      GOPROXY: off
++      GOOS: linux
++      GOARCH: 386
++    commands:
++      - go build -mod=vendor -o gitea_linux_386 # test if compatible with 32 bit
++    depends_on: [lint-backend]
++
++---
++kind: pipeline
++name: testing-amd64
++
++platform:
++  os: linux
++  arch: amd64
++
++depends_on:
++  - compliance
++
++workspace:
++  base: /go
++  path: src/code.gitea.io/gitea
++
++services:
++  - name: mysql
++    pull: default
++    image: mysql:5.7
++    environment:
++      MYSQL_ALLOW_EMPTY_PASSWORD: yes
++      MYSQL_DATABASE: test
++      GOPROXY: off
++      TAGS: bindata sqlite sqlite_unlock_notify
++      GITLAB_READ_TOKEN:
++        from_secret: gitlab_read_token
++    depends_on:
++      - build
++    when:
++      branch:
++        - master
++      event:
++        - push
++        - pull_request
++
++  - name: mysql8
++    pull: default
++    image: mysql:8.0
++    environment:
++      MYSQL_ALLOW_EMPTY_PASSWORD: yes
++      MYSQL_DATABASE: testgitea
++
++  - name: mssql
++    pull: default
++    image: mcr.microsoft.com/mssql/server:latest
++    environment:
++      ACCEPT_EULA: Y
++      MSSQL_PID: Standard
++      SA_PASSWORD: MwantsaSecurePassword1
++
++  - name: ldap
++    pull: default
++    image: gitea/test-openldap:latest
++
++  - name: elasticsearch
++    pull: default
++    environment:
++      discovery.type: single-node
++    image: elasticsearch:7.5.0
++
++steps:
++  - name: fetch-tags
++    pull: default
++    image: docker:git
++    commands:
++      - git fetch --tags --force
++    when:
++      event:
++        exclude:
++          - pull_request
++
++  - name: build
++    pull: always
++    image: golang:1.14
++    commands:
++      - make backend
++    environment:
++      GOPROXY: https://goproxy.cn # proxy.golang.org is blocked in China, this proxy is not
++      GOSUMDB: sum.golang.org
++      TAGS: bindata sqlite sqlite_unlock_notify
++
++  - name: tag-pre-condition
++    pull: always
++    image: alpine/git
++    commands:
++      - git update-ref refs/heads/tag_test ${DRONE_COMMIT_SHA}
++
++  - name: unit-test
++    pull: always
++    image: golang:1.14
++    commands:
++      - make unit-test-coverage test-check
++    environment:
++      GOPROXY: off
++      TAGS: bindata sqlite sqlite_unlock_notify
++      GITHUB_READ_TOKEN:
++        from_secret: github_read_token
++
++  - name: test-mysql
++    pull: always
++    image: golang:1.14
++    commands:
++      - "curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash"
++      - apt-get install -y git-lfs
++      - make test-mysql-migration integration-test-coverage
++    environment:
++      GOPROXY: off
++      TAGS: bindata
++      TEST_LDAP: 1
++      USE_REPO_TEST_DIR: 1
++    depends_on:
++      - build
++
++  - name: test-mysql8
++    pull: always
++    image: golang:1.14
++    commands:
++      - "curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash"
++      - apt-get install -y git-lfs
++      - timeout -s ABRT 40m make test-mysql8-migration test-mysql8
++    environment:
++      GOPROXY: off
++      TAGS: bindata
++      TEST_LDAP: 1
++      USE_REPO_TEST_DIR: 1
++    depends_on:
++      - build
++
++  - name: test-mssql
++    pull: always
++    image: golang:1.14
++    commands:
++      - "curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash"
++      - apt-get install -y git-lfs
++      - make test-mssql-migration test-mssql
++    environment:
++      GOPROXY: off
++      TAGS: bindata
++      TEST_LDAP: 1
++      USE_REPO_TEST_DIR: 1
++    depends_on:
++      - build
++
++  - name: generate-coverage
++    pull: always
++    image: golang:1.14
++    commands:
++      - make coverage
++    environment:
++      GOPROXY: off
++      TAGS: bindata
++    depends_on:
++      - unit-test
++      - test-mysql
++    when:
++      branch:
++        - master
++      event:
++        - push
++        - pull_request
++
++  - name: coverage
++    pull: always
++    image: robertstettner/drone-codecov
++    settings:
++      files:
++        - coverage.all
++    environment:
++      CODECOV_TOKEN:
++        from_secret: codecov_token
++    depends_on:
++      - generate-coverage
++    when:
++      branch:
++        - master
++      event:
++        - push
++        - pull_request
++
++---
++kind: pipeline
++name: testing-arm64
++
++platform:
++  os: linux
++  arch: arm64
++
++depends_on:
++  - compliance
++
++workspace:
++  base: /go
++  path: src/code.gitea.io/gitea
++
++services:
++  - name: pgsql
++    pull: default
++    image: postgres:9.5
++    environment:
++      POSTGRES_DB: test
++      POSTGRES_PASSWORD: postgres
++
++  - name: ldap
++    pull: default
++    image: gitea/test-openldap:latest
++
++steps:
++  - name: fetch-tags
++    pull: default
++    image: docker:git
++    commands:
++      - git fetch --tags --force
++    when:
++      event:
++        exclude:
++          - pull_request
++
++  - name: build
++    pull: always
++    image: golang:1.14
++    commands:
++      - make backend
++    environment:
++      GOPROXY: https://goproxy.cn # proxy.golang.org is blocked in China, this proxy is not
++      GOSUMDB: sum.golang.org
++      TAGS: bindata sqlite sqlite_unlock_notify
++
++  - name: test-sqlite
++    pull: always
++    image: golang:1.14
++    commands:
++      - "curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash"
++      - apt-get install -y git-lfs
++      - timeout -s ABRT 40m make test-sqlite-migration test-sqlite
++    environment:
++      GOPROXY: off
++      TAGS: bindata
++      USE_REPO_TEST_DIR: 1
++    depends_on:
++      - build
++
++  - name: test-pgsql
++    pull: always
++    image: golang:1.14
++    commands:
++      - "curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash"
++      - apt-get install -y git-lfs
++      - timeout -s ABRT 40m make test-pgsql-migration test-pgsql
++    environment:
++      GOPROXY: off
++      TAGS: bindata
++      TEST_LDAP: 1
++      USE_REPO_TEST_DIR: 1
++    depends_on:
++      - build
++
++---
++kind: pipeline
++name: translations
++
++platform:
++  os: linux
++  arch: arm64
++
++workspace:
++  base: /go
++  path: src/code.gitea.io/gitea
++
++trigger:
++  branch:
++    - master
++  event:
++    - push
++
++steps:
++  - name: download
++    pull: always
++    image: jonasfranz/crowdin
++    settings:
++      download: true
++      export_dir: options/locale/
++      ignore_branch: true
++      project_identifier: gitea
++    environment:
++      CROWDIN_KEY:
++        from_secret: crowdin_key
++
++  - name: update
++    pull: default
++    image: alpine:3.11
++    commands:
++      - ./build/update-locales.sh
++
++  - name: push
++    pull: always
++    image: appleboy/drone-git-push
++    settings:
++      author_email: "teabot@gitea.io"
++      author_name: GiteaBot
++      commit: true
++      commit_message: "[skip ci] Updated translations via Crowdin"
++      remote: "git@github.com:go-gitea/gitea.git"
++    environment:
++      GIT_PUSH_SSH_KEY:
++        from_secret: git_push_ssh_key
++
++  - name: upload_translations
++    pull: always
++    image: jonasfranz/crowdin
++    settings:
++      files:
++        locale_en-US.ini: options/locale/locale_en-US.ini
++      ignore_branch: true
++      project_identifier: gitea
++    environment:
++      CROWDIN_KEY:
++        from_secret: crowdin_key
++
++---
++kind: pipeline
++name: release-latest
++
++platform:
++  os: linux
++  arch: amd64
++
++workspace:
++  base: /go
++  path: src/code.gitea.io/gitea
++
++trigger:
++  branch:
++    - master
++    - "release/*"
++  event:
++    - push
++
++depends_on:
++  - testing-amd64
++  - testing-arm64
++  - translations
++
++steps:
++  - name: fetch-tags
++    pull: default
++    image: docker:git
++    commands:
++      - git fetch --tags --force
++
++  - name: static
++    pull: always
++    image: techknowlogick/xgo:go-1.14.x
++    commands:
++      - apt update && apt -y install curl
++      - curl -sL https://deb.nodesource.com/setup_12.x | bash - && apt -y install nodejs
++      - export PATH=$PATH:$GOPATH/bin
++      - make release
++    environment:
++      GOPROXY: https://goproxy.cn # proxy.golang.org is blocked in China, this proxy is not
++      TAGS: bindata sqlite sqlite_unlock_notify
++
++  - name: gpg-sign
++    pull: always
++    image: plugins/gpgsign:1
++    settings:
++      detach_sign: true
++      excludes:
++        - "dist/release/*.sha256"
++      files:
++        - "dist/release/*"
++    environment:
++      GPGSIGN_KEY:
++        from_secret: gpgsign_key
++      GPGSIGN_PASSPHRASE:
++        from_secret: gpgsign_passphrase
++
++  - name: release-branch
++    pull: always
++    image: plugins/s3:1
++    settings:
++      acl: public-read
++      bucket: releases
++      endpoint: https://storage.gitea.io
++      path_style: true
++      source: "dist/release/*"
++      strip_prefix: dist/release/
++      target: "/gitea/${DRONE_BRANCH##release/v}"
++    environment:
++      AWS_ACCESS_KEY_ID:
++        from_secret: aws_access_key_id
++      AWS_SECRET_ACCESS_KEY:
++        from_secret: aws_secret_access_key
++    when:
++      branch:
++        - "release/*"
++      event:
++        - push
++
++  - name: release-master
++    pull: always
++    image: plugins/s3:1
++    settings:
++      acl: public-read
++      bucket: releases
++      endpoint: https://storage.gitea.io
++      path_style: true
++      source: "dist/release/*"
++      strip_prefix: dist/release/
++      target: /gitea/master
++    environment:
++      AWS_ACCESS_KEY_ID:
++        from_secret: aws_access_key_id
++      AWS_SECRET_ACCESS_KEY:
++        from_secret: aws_secret_access_key
++    when:
++      branch:
++        - master
++      event:
++        - push
++
++---
++kind: pipeline
++name: release-version
++
++platform:
++  os: linux
++  arch: amd64
++
++workspace:
++  base: /go
++  path: src/code.gitea.io/gitea
++
++trigger:
++  event:
++    - tag
++
++depends_on:
++  - testing-arm64
++  - testing-amd64
++
++steps:
++  - name: fetch-tags
++    pull: default
++    image: docker:git
++    commands:
++      - git fetch --tags --force
++
++  - name: static
++    pull: always
++    image: techknowlogick/xgo:go-1.14.x
++    commands:
++      - apt update && apt -y install curl
++      - curl -sL https://deb.nodesource.com/setup_12.x | bash - && apt -y install nodejs
++      - export PATH=$PATH:$GOPATH/bin
++      - make release
++    environment:
++      GOPROXY: https://goproxy.cn # proxy.golang.org is blocked in China, this proxy is not
++      TAGS: bindata sqlite sqlite_unlock_notify
++
++  - name: gpg-sign
++    pull: always
++    image: plugins/gpgsign:1
++    settings:
++      detach_sign: true
++      excludes:
++        - "dist/release/*.sha256"
++      files:
++        - "dist/release/*"
++    environment:
++      GPGSIGN_KEY:
++        from_secret: gpgsign_key
++      GPGSIGN_PASSPHRASE:
++        from_secret: gpgsign_passphrase
++
++  - name: release-tag
++    pull: always
++    image: plugins/s3:1
++    settings:
++      acl: public-read
++      bucket: releases
++      endpoint: https://storage.gitea.io
++      path_style: true
++      source: "dist/release/*"
++      strip_prefix: dist/release/
++      target: "/gitea/${DRONE_TAG##v}"
++    environment:
++      AWS_ACCESS_KEY_ID:
++        from_secret: aws_access_key_id
++      AWS_SECRET_ACCESS_KEY:
++        from_secret: aws_secret_access_key
++
++  - name: github
++    pull: always
++    image: plugins/github-release:1
++    settings:
++      files:
++        - "dist/release/*"
++    environment:
++      GITHUB_TOKEN:
++        from_secret: github_token
++
++---
++kind: pipeline
++name: docs
++
++platform:
++  os: linux
++  arch: arm64
++
++depends_on:
++  - compliance
++
++steps:
++  - name: build-docs
++    pull: always
++    image: plugins/hugo:latest
++    commands:
++      - apk add --no-cache make bash curl
++      - cd docs
++      - make trans-copy clean build
++
++  - name: publish-docs
++    pull: always
++    image: techknowlogick/drone-netlify:latest
++    settings:
++      path: docs/public/
++      site_id: d2260bae-7861-4c02-8646-8f6440b12672
++    environment:
++      NETLIFY_TOKEN:
++        from_secret: netlify_token
++    when:
++      branch:
++        - master
++      event:
++        - push
++
++---
++kind: pipeline
++name: docker-linux-amd64-release
++
++platform:
++  os: linux
++  arch: amd64
++
++workspace:
++  base: /go
++  path: src/code.gitea.io/gitea
++
++depends_on:
++  - testing-amd64
++  - testing-arm64
++
++trigger:
++  ref:
++  - refs/heads/master
++  - "refs/tags/**"
++
++steps:
++  - name: fetch-tags
++    pull: default
++    image: docker:git
++    commands:
++      - git fetch --tags --force
++
++  - name: publish
++    pull: always
++    image: plugins/docker:linux-amd64
++    settings:
++      auto_tag: true
++      auto_tag_suffix: linux-amd64
++      repo: gitea/gitea
++      build_args:
++        - GOPROXY=off
++      password:
++        from_secret: docker_password
++      username:
++        from_secret: docker_username
++    when:
++      event:
++        exclude:
++        - pull_request
++
++---
++kind: pipeline
++name: docker-linux-arm64-dry-run
++
++platform:
++  os: linux
++  arch: arm64
++
++workspace:
++  base: /go
++  path: src/code.gitea.io/gitea
++
++depends_on:
++  - compliance
++
++trigger:
++  ref:
++  - "refs/pull/**"
++
++steps:
++  - name: dryrun
++    pull: always
++    image: plugins/docker:linux-arm64
++    settings:
++      dry_run: true
++      repo: gitea/gitea
++      tags: linux-arm64
++      build_args:
++        - GOPROXY=off
++    when:
++      event:
++        - pull_request
++
++---
++kind: pipeline
++name: docker-linux-arm64-release
++
++platform:
++  os: linux
++  arch: arm64
++
++workspace:
++  base: /go
++  path: src/code.gitea.io/gitea
++
++depends_on:
++  - testing-amd64
++  - testing-arm64
++
++trigger:
++  ref:
++  - refs/heads/master
++  - "refs/tags/**"
++steps:
++  - name: fetch-tags
++    pull: default
++    image: docker:git
++    commands:
++      - git fetch --tags --force
++
++  - name: publish
++    pull: always
++    image: plugins/docker:linux-arm64
++    settings:
++      auto_tag: true
++      auto_tag_suffix: linux-arm64
++      repo: gitea/gitea
++      build_args:
++        - GOPROXY=off
++      password:
++        from_secret: docker_password
++      username:
++        from_secret: docker_username
++    when:
++      event:
++        exclude:
++        - pull_request
++
++---
++kind: pipeline
++name: docker-manifest
++
++platform:
++  os: linux
++  arch: amd64
++
++steps:
++  - name: manifest
++    pull: always
++    image: plugins/manifest
++    settings:
++      auto_tag: true
++      ignore_missing: true
++      spec: docker/manifest.tmpl
++      password:
++        from_secret: docker_password
++      username:
++        from_secret: docker_username
++
++trigger:
++  ref:
++  - refs/heads/master
++  - "refs/tags/**"
++
++depends_on:
++  - docker-linux-amd64-release
++  - docker-linux-arm64-release
++
++---
++kind: pipeline
++name: notifications
++
++platform:
++  os: linux
++  arch: arm64
++
++clone:
++  disable: true
++
++trigger:
++  branch:
++    - master
++    - "release/*"
++  event:
++    - push
++    - tag
++  status:
++    - success
++    - failure
++
++depends_on:
++  - testing-amd64
++  - testing-arm64
++  - translations
++  - release-version
++  - release-latest
++  - docker-linux-amd64-release
++  - docker-linux-arm64-release
++  - docker-manifest
++  - docs
++
++steps:
++  - name: discord
++    pull: always
++    image: appleboy/drone-discord:1.2.4
++    settings:
++      message: "{{#success build.status}} ✅  Build #{{build.number}} of `{{repo.name}}` succeeded.\n\n📝 Commit by {{commit.author}} on `{{commit.branch}}`:\n``` {{commit.message}} ```\n\n🌐 {{ build.link }} {{else}} ❌  Build #{{build.number}} of `{{repo.name}}` failed.\n\n📝 Commit by {{commit.author}} on `{{commit.branch}}`:\n``` {{commit.message}} ```\n\n🌐 {{ build.link }} {{/success}}\n"
++      webhook_id:
++        from_secret: discord_webhook_id
++      webhook_token:
++        from_secret: discord_webhook_token
+diff --git a/custom/conf/app.ini.sample b/custom/conf/app.ini.sample
+index 06b7b96d4..50a61d8ea 100644
+--- a/custom/conf/app.ini.sample
++++ b/custom/conf/app.ini.sample
+@@ -409,7 +409,15 @@ STARTUP_TIMEOUT=30s
+ 
+ ; repo indexer by default disabled, since it uses a lot of disk space
+ REPO_INDEXER_ENABLED = false
++; Code search engine type, could be `bleve` or `elasticsearch`.
++REPO_INDEXER_TYPE = bleve
++; Index file used for code search.
+ REPO_INDEXER_PATH = indexers/repos.bleve
++; Code indexer connection string, available when `REPO_INDEXER_TYPE` is elasticsearch. i.e. http://elastic:changeme@localhost:9200
++REPO_INDEXER_CONN_STR = 
++; Code indexer name, available when `REPO_INDEXER_TYPE` is elasticsearch
++`REPO_INDEXER_NAME` = gitea_codes
++
+ UPDATE_BUFFER_LEN = 20
+ MAX_FILE_SIZE = 1048576
+ ; A comma separated list of glob patterns (see https://github.com/gobwas/glob) to include
+diff --git a/docs/content/doc/advanced/config-cheat-sheet.en-us.md b/docs/content/doc/advanced/config-cheat-sheet.en-us.md
+index 3ad24776f..80dcce1a6 100644
+--- a/docs/content/doc/advanced/config-cheat-sheet.en-us.md
++++ b/docs/content/doc/advanced/config-cheat-sheet.en-us.md
+@@ -264,7 +264,11 @@ relation to port exhaustion.
+ - `ISSUE_INDEXER_QUEUE_BATCH_NUMBER`: **20**: Batch queue number.
+ 
+ - `REPO_INDEXER_ENABLED`: **false**: Enables code search (uses a lot of disk space, about 6 times more than the repository size).
++- `REPO_INDEXER_TYPE`: **bleve**: Code search engine type, could be `bleve` or `elasticsearch`.
+ - `REPO_INDEXER_PATH`: **indexers/repos.bleve**: Index file used for code search.
++- `REPO_INDEXER_CONN_STR`: ****: Code indexer connection string, available when `REPO_INDEXER_TYPE` is elasticsearch. i.e. http://elastic:changeme@localhost:9200
++- `REPO_INDEXER_NAME`: **gitea_codes**: Code indexer name, available when `REPO_INDEXER_TYPE` is elasticsearch
++
+ - `REPO_INDEXER_INCLUDE`: **empty**: A comma separated list of glob patterns (see https://github.com/gobwas/glob) to **include** in the index. Use `**.txt` to match any files with .txt extension. An empty list means include all files.
+ - `REPO_INDEXER_EXCLUDE`: **empty**: A comma separated list of glob patterns (see https://github.com/gobwas/glob) to **exclude** from the index. Files that match this list will not be indexed, even if they match in `REPO_INDEXER_INCLUDE`.
+ - `REPO_INDEXER_EXCLUDE_VENDORED`: **true**: Exclude vendored files from index.
+diff --git a/docs/content/doc/advanced/config-cheat-sheet.en-us.md.orig b/docs/content/doc/advanced/config-cheat-sheet.en-us.md.orig
+new file mode 100644
+index 000000000..3ad24776f
+--- /dev/null
++++ b/docs/content/doc/advanced/config-cheat-sheet.en-us.md.orig
+@@ -0,0 +1,699 @@
++---
++date: "2016-12-26T16:00:00+02:00"
++title: "Config Cheat Sheet"
++slug: "config-cheat-sheet"
++weight: 20
++toc: false
++draft: false
++menu:
++  sidebar:
++    parent: "advanced"
++    name: "Config Cheat Sheet"
++    weight: 20
++    identifier: "config-cheat-sheet"
++---
++
++# Configuration Cheat Sheet
++
++This is a cheat sheet for the Gitea configuration file. It contains most of the settings
++that can be configured as well as their default values.
++
++Any changes to the Gitea configuration file should be made in `custom/conf/app.ini`
++or any corresponding location. When installing from a distribution, this will
++typically be found at `/etc/gitea/conf/app.ini`.
++
++The defaults provided here are best-effort (not built automatically). They are
++accurately recorded in [app.ini.sample](https://github.com/go-gitea/gitea/blob/master/custom/conf/app.ini.sample)
++(s/master/\<tag|release\>). Any string in the format `%(X)s` is a feature powered
++by [ini](https://github.com/go-ini/ini/#recursive-values), for reading values recursively.
++
++Values containing `#` or `;` must be quoted using `` ` `` or `"""`.
++
++**Note:** A full restart is required for Gitea configuration changes to take effect.
++
++## Overall (`DEFAULT`)
++
++- `APP_NAME`: **Gitea: Git with a cup of tea**: Application name, used in the page title.
++- `RUN_USER`: **git**: The user Gitea will run as. This should be a dedicated system
++   (non-user) account. Setting this incorrectly will cause Gitea to not start.
++- `RUN_MODE`: **dev**: For performance and other purposes, change this to `prod` when
++   deployed to a production environment. The installation process will set this to `prod`
++   automatically. \[prod, dev, test\]
++
++## Repository (`repository`)
++
++- `ROOT`: **~/gitea-repositories/**: Root path for storing all repository data. It must be
++   an absolute path.
++- `SCRIPT_TYPE`: **bash**: The script type this server supports. Usually this is `bash`,
++   but some users report that only `sh` is available.
++- `ANSI_CHARSET`: **\<empty\>**: The default charset for an unrecognized charset.
++- `FORCE_PRIVATE`: **false**: Force every new repository to be private.
++- `DEFAULT_PRIVATE`: **last**: Default private when creating a new repository.
++   \[last, private, public\]
++- `MAX_CREATION_LIMIT`: **-1**: Global maximum creation limit of repositories per user,
++   `-1` means no limit.
++- `PULL_REQUEST_QUEUE_LENGTH`: **1000**: Length of pull request patch test queue, make it
++   as large as possible. Use caution when editing this value.
++- `MIRROR_QUEUE_LENGTH`: **1000**: Patch test queue length, increase if pull request patch
++   testing starts hanging.
++- `PREFERRED_LICENSES`: **Apache License 2.0,MIT License**: Preferred Licenses to place at
++   the top of the list. Name must match file name in conf/license or custom/conf/license.
++- `DISABLE_HTTP_GIT`: **false**: Disable the ability to interact with repositories over the
++   HTTP protocol.
++- `USE_COMPAT_SSH_URI`: **false**: Force ssh:// clone url instead of scp-style uri when
++   default SSH port is used.
++- `ACCESS_CONTROL_ALLOW_ORIGIN`: **\<empty\>**: Value for Access-Control-Allow-Origin header,
++   default is not to present. **WARNING**: This maybe harmful to you website if you do not
++   give it a right value.
++- `DEFAULT_CLOSE_ISSUES_VIA_COMMITS_IN_ANY_BRANCH`:  **false**: Close an issue if a commit on a non default branch marks it as closed.
++- `ENABLE_PUSH_CREATE_USER`:  **false**: Allow users to push local repositories to Gitea and have them automatically created for a user.
++- `ENABLE_PUSH_CREATE_ORG`:  **false**: Allow users to push local repositories to Gitea and have them automatically created for an org.
++- `PREFIX_ARCHIVE_FILES`: **true**: Prefix archive files by placing them in a directory named after the repository.
++
++### Repository - Pull Request (`repository.pull-request`)
++
++- `WORK_IN_PROGRESS_PREFIXES`: **WIP:,\[WIP\]**: List of prefixes used in Pull Request
++ title to mark them as Work In Progress
++- `CLOSE_KEYWORDS`: **close**, **closes**, **closed**, **fix**, **fixes**, **fixed**, **resolve**, **resolves**, **resolved**: List of
++ keywords used in Pull Request comments to automatically close a related issue
++- `REOPEN_KEYWORDS`: **reopen**, **reopens**, **reopened**: List of keywords used in Pull Request comments to automatically reopen
++ a related issue
++- `DEFAULT_MERGE_MESSAGE_COMMITS_LIMIT`: **50**: In the default merge message for squash commits include at most this many commits. Set to `-1` to include all commits
++- `DEFAULT_MERGE_MESSAGE_SIZE`: **5120**: In the default merge message for squash commits limit the size of the commit messages. Set to `-1` to have no limit.
++- `DEFAULT_MERGE_MESSAGE_ALL_AUTHORS`: **false**: In the default merge message for squash commits walk all commits to include all authors in the Co-authored-by otherwise just use those in the limited list
++- `DEFAULT_MERGE_MESSAGE_MAX_APPROVERS`: **10**: In default merge messages limit the number of approvers listed as `Reviewed-by:`. Set to `-1` to include all.
++- `DEFAULT_MERGE_MESSAGE_OFFICIAL_APPROVERS_ONLY`: **true**: In default merge messages only include approvers who are officially allowed to review.
++
++### Repository - Issue (`repository.issue`)
++
++- `LOCK_REASONS`: **Too heated,Off-topic,Resolved,Spam**: A list of reasons why a Pull Request or Issue can be locked
++
++### Repository - Signing (`repository.signing`)
++
++- `SIGNING_KEY`: **default**: \[none, KEYID, default \]: Key to sign with.
++- `SIGNING_NAME` &amp; `SIGNING_EMAIL`: if a KEYID is provided as the `SIGNING_KEY`, use these as the Name and Email address of the signer. These should match publicized name and email address for the key.
++- `INITIAL_COMMIT`: **always**: \[never, pubkey, twofa, always\]: Sign initial commit.
++  - `never`: Never sign
++  - `pubkey`: Only sign if the user has a public key
++  - `twofa`: Only sign if the user is logged in with twofa
++  - `always`: Always sign
++  - Options other than `never` and `always` can be combined as a comma separated list.
++- `WIKI`: **never**: \[never, pubkey, twofa, always, parentsigned\]: Sign commits to wiki.
++- `CRUD_ACTIONS`: **pubkey, twofa, parentsigned**: \[never, pubkey, twofa, parentsigned, always\]: Sign CRUD actions.
++  - Options as above, with the addition of:
++  - `parentsigned`: Only sign if the parent commit is signed.
++- `MERGES`: **pubkey, twofa, basesigned, commitssigned**: \[never, pubkey, twofa, approved, basesigned, commitssigned, always\]: Sign merges.
++  - `approved`: Only sign approved merges to a protected branch.
++  - `basesigned`: Only sign if the parent commit in the base repo is signed.
++  - `headsigned`: Only sign if the head commit in the head branch is signed.
++  - `commitssigned`: Only sign if all the commits in the head branch to the merge point are signed.
++
++## CORS (`cors`)
++
++- `ENABLED`: **false**: enable cors headers (disabled by default)
++- `SCHEME`: **http**: scheme of allowed requests
++- `ALLOW_DOMAIN`: **\***: list of requesting domains that are allowed
++- `ALLOW_SUBDOMAIN`: **false**: allow subdomains of headers listed above to request
++- `METHODS`: **GET,HEAD,POST,PUT,PATCH,DELETE,OPTIONS**: list of methods allowed to request
++- `MAX_AGE`: **10m**: max time to cache response
++- `ALLOW_CREDENTIALS`: **false**: allow request with credentials
++
++## UI (`ui`)
++
++- `EXPLORE_PAGING_NUM`: **20**: Number of repositories that are shown in one explore page.
++- `ISSUE_PAGING_NUM`: **10**: Number of issues that are shown in one page (for all pages that list issues).
++- `MEMBERS_PAGING_NUM`: **20**: Number of members that are shown in organization members.
++- `FEED_MAX_COMMIT_NUM`: **5**: Number of maximum commits shown in one activity feed.
++- `GRAPH_MAX_COMMIT_NUM`: **100**: Number of maximum commits shown in the commit graph.
++- `DEFAULT_THEME`: **gitea**: \[gitea, arc-green\]: Set the default theme for the Gitea install.
++- `THEMES`:  **gitea,arc-green**: All available themes. Allow users select personalized themes
++  regardless of the value of `DEFAULT_THEME`.
++- `REACTIONS`: All available reactions users can choose on issues/prs and comments
++    Values can be emoji alias (:smile:) or a unicode emoji.
++    For custom reactions, add a tightly cropped square image to public/emoji/img/reaction_name.png
++- `DEFAULT_SHOW_FULL_NAME`: **false**: Whether the full name of the users should be shown where possible. If the full name isn't set, the username will be used.
++- `SEARCH_REPO_DESCRIPTION`: **true**: Whether to search within description at repository search on explore page.
++- `USE_SERVICE_WORKER`: **true**: Whether to enable a Service Worker to cache frontend assets.
++
++### UI - Admin (`ui.admin`)
++
++- `USER_PAGING_NUM`: **50**: Number of users that are shown in one page.
++- `REPO_PAGING_NUM`: **50**: Number of repos that are shown in one page.
++- `NOTICE_PAGING_NUM`: **25**: Number of notices that are shown in one page.
++- `ORG_PAGING_NUM`: **50**: Number of organizations that are shown in one page.
++
++### UI - Notification (`ui.notification`)
++
++- `MIN_TIMEOUT`: **10s**: These options control how often notification endpoint is polled to update the notification count. On page load the notification count will be checked after `MIN_TIMEOUT`. The timeout will increase to `MAX_TIMEOUT` by `TIMEOUT_STEP` if the notification count is unchanged. Set MIN_TIMEOUT to 0 to turn off.
++- `MAX_TIMEOUT`: **60s**.
++- `TIMEOUT_STEP`: **10s**.
++- `EVENT_SOURCE_UPDATE_TIME`: **10s**: This setting determines how often the database is queried to update notification counts. If the browser client supports `EventSource`, it will be used in preference to polling notification endpoint.
++
++
++## Markdown (`markdown`)
++
++- `ENABLE_HARD_LINE_BREAK`: **true**: Render soft line breaks as hard line breaks, which
++  means a single newline character between paragraphs will cause a line break and adding
++  trailing whitespace to paragraphs is not necessary to force a line break.
++- `CUSTOM_URL_SCHEMES`: Use a comma separated list (ftp,git,svn) to indicate additional
++  URL hyperlinks to be rendered in Markdown. URLs beginning in http and https are
++  always displayed
++
++## Server (`server`)
++
++- `PROTOCOL`: **http**: \[http, https, fcgi, unix, fcgi+unix\]
++- `DOMAIN`: **localhost**: Domain name of this server.
++- `ROOT_URL`: **%(PROTOCOL)s://%(DOMAIN)s:%(HTTP\_PORT)s/**:
++   Overwrite the automatically generated public URL.
++   This is useful if the internal and the external URL don't match (e.g. in Docker).
++- `STATIC_URL_PREFIX`: **\<empty\>**:
++   Overwrite this option to request static resources from a different URL.
++   This includes CSS files, images, JS files and web fonts.
++   Avatar images are dynamic resources and still served by gitea.
++   The option can be just a different path, as in `/static`, or another domain, as in `https://cdn.example.com`.
++   Requests are then made as `%(ROOT_URL)s/static/css/index.css` and `https://cdn.example.com/css/index.css` respective.
++   The static files are located in the `public/` directory of the gitea source repository.
++- `HTTP_ADDR`: **0.0.0.0**: HTTP listen address.
++   - If `PROTOCOL` is set to `fcgi`, Gitea will listen for FastCGI requests on TCP socket
++     defined by `HTTP_ADDR` and `HTTP_PORT` configuration settings.
++   - If `PROTOCOL` is set to `unix` or `fcgi+unix`, this should be the name of the Unix socket file to use.
++- `HTTP_PORT`: **3000**: HTTP listen port.
++   - If `PROTOCOL` is set to `fcgi`, Gitea will listen for FastCGI requests on TCP socket
++     defined by `HTTP_ADDR` and `HTTP_PORT` configuration settings.
++- `UNIX_SOCKET_PERMISSION`: **666**: Permissions for the Unix socket.
++- `LOCAL_ROOT_URL`: **%(PROTOCOL)s://%(HTTP_ADDR)s:%(HTTP_PORT)s/**: Local
++   (DMZ) URL for Gitea workers (such as SSH update) accessing web service. In
++   most cases you do not need to change the default value. Alter it only if
++   your SSH server node is not the same as HTTP node. Do not set this variable
++   if `PROTOCOL` is set to `unix`.
++- `DISABLE_SSH`: **false**: Disable SSH feature when it's not available.
++- `START_SSH_SERVER`: **false**: When enabled, use the built-in SSH server.
++- `SSH_DOMAIN`: **%(DOMAIN)s**: Domain name of this server, used for displayed clone URL.
++- `SSH_PORT`: **22**: SSH port displayed in clone URL.
++- `SSH_LISTEN_HOST`: **0.0.0.0**: Listen address for the built-in SSH server.
++- `SSH_LISTEN_PORT`: **%(SSH\_PORT)s**: Port for the built-in SSH server.
++- `OFFLINE_MODE`: **false**: Disables use of CDN for static files and Gravatar for profile pictures.
++- `DISABLE_ROUTER_LOG`: **false**: Mute printing of the router log.
++- `CERT_FILE`: **https/cert.pem**: Cert file path used for HTTPS. From 1.11 paths are relative to `CUSTOM_PATH`.
++- `KEY_FILE`: **https/key.pem**: Key file path used for HTTPS. From 1.11 paths are relative to `CUSTOM_PATH`.
++- `STATIC_ROOT_PATH`: **./**: Upper level of template and static files path.
++- `STATIC_CACHE_TIME`: **6h**: Web browser cache time for static resources on `custom/`, `public/` and all uploaded avatars.
++- `ENABLE_GZIP`: **false**: Enables application-level GZIP support.
++- `LANDING_PAGE`: **home**: Landing page for unauthenticated users \[home, explore, organizations, login\].
++- `LFS_START_SERVER`: **false**: Enables git-lfs support.
++- `LFS_CONTENT_PATH`: **./data/lfs**: Where to store LFS files.
++- `LFS_JWT_SECRET`: **\<empty\>**: LFS authentication secret, change this a unique string.
++- `LFS_HTTP_AUTH_EXPIRY`: **20m**: LFS authentication validity period in time.Duration, pushes taking longer than this may fail.
++- `LFS_MAX_FILE_SIZE`: **0**: Maximum allowed LFS file size in bytes (Set to 0 for no limit).
++- `LFS_LOCK_PAGING_NUM`: **50**: Maximum number of LFS Locks returned per page.
++- `REDIRECT_OTHER_PORT`: **false**: If true and `PROTOCOL` is https, allows redirecting http requests on `PORT_TO_REDIRECT` to the https port Gitea listens on.
++- `PORT_TO_REDIRECT`: **80**: Port for the http redirection service to listen on. Used when `REDIRECT_OTHER_PORT` is true.
++- `ENABLE_LETSENCRYPT`: **false**: If enabled you must set `DOMAIN` to valid internet facing domain (ensure DNS is set and port 80 is accessible by letsencrypt validation server).
++   By using Lets Encrypt **you must consent** to their [terms of service](https://letsencrypt.org/documents/LE-SA-v1.2-November-15-2017.pdf).
++- `LETSENCRYPT_ACCEPTTOS`: **false**: This is an explicit check that you accept the terms of service for Let's Encrypt.
++- `LETSENCRYPT_DIRECTORY`: **https**: Directory that Letsencrypt will use to cache information such as certs and private keys.
++- `LETSENCRYPT_EMAIL`: **email@example.com**: Email used by Letsencrypt to notify about problems with issued certificates. (No default)
++- `ALLOW_GRACEFUL_RESTARTS`: **true**: Perform a graceful restart on SIGHUP
++- `GRACEFUL_HAMMER_TIME`: **60s**: After a restart the parent process will stop accepting new connections and will allow requests to finish before stopping. Shutdown will be forced if it takes longer than this time.
++- `STARTUP_TIMEOUT`: **0**: Shutsdown the server if startup takes longer than the provided time. On Windows setting this sends a waithint to the SVC host to tell the SVC host startup may take some time. Please note startup is determined by the opening of the listeners - HTTP/HTTPS/SSH. Indexers may take longer to startup and can have their own timeouts.
++
++## Database (`database`)
++
++- `DB_TYPE`: **mysql**: The database type in use \[mysql, postgres, mssql, sqlite3\].
++- `HOST`: **127.0.0.1:3306**: Database host address and port or absolute path for unix socket \[mysql, postgres\] (ex: /var/run/mysqld/mysqld.sock).
++- `NAME`: **gitea**: Database name.
++- `USER`: **root**: Database username.
++- `PASSWD`: **\<empty\>**: Database user password. Use \`your password\` for quoting if you use special characters in the password.
++- `SCHEMA`: **\<empty\>**: For PostgreSQL only, schema to use if different from "public". The schema must exist beforehand,
++  the user must have creation privileges on it, and the user search path must be set to the look into the schema first 
++  (e.g. `ALTER USER user SET SEARCH_PATH = schema_name,"$user",public;`).
++- `SSL_MODE`: **disable**: SSL/TLS encryption mode for connecting to the database. This option is only applied for PostgreSQL and MySQL.
++  - Valid values for MySQL:
++     - `true`: Enable TLS with verification of the database server certificate against its root certificate. When selecting this option make sure that the root certificate required to validate the database server certificate (e.g. the CA certificate) is on the system certificate store of both the database and Gitea servers. See your system documentation for instructions on how to add a CA certificate to the certificate store.
++     - `false`: Disable TLS.
++     - `disable`: Alias for `false`, for compatibility with PostgreSQL.
++     - `skip-verify`: Enable TLS without database server certificate verification. Use this option if you have self-signed or invalid certificate on the database server.
++     - `prefer`: Enable TLS with fallback to non-TLS connection.
++  - Valid values for PostgreSQL:
++     - `disable`: Disable TLS.
++     - `require`: Enable TLS without any verifications.
++     - `verify-ca`: Enable TLS with verification of the database server certificate against its root certificate.
++     - `verify-full`: Enable TLS and verify the database server name matches the given certificate in either the `Common Name` or `Subject Alternative Name` fields.
++- `CHARSET`: **utf8**: For MySQL only, either "utf8" or "utf8mb4", default is "utf8". NOTICE: for "utf8mb4" you must use MySQL InnoDB > 5.6. Gitea is unable to check this.
++- `PATH`: **data/gitea.db**: For SQLite3 only, the database file path.
++- `LOG_SQL`: **true**: Log the executed SQL.
++- `DB_RETRIES`: **10**: How many ORM init / DB connect attempts allowed.
++- `DB_RETRY_BACKOFF`: **3s**: time.Duration to wait before trying another ORM init / DB connect attempt, if failure occured.
++- `MAX_OPEN_CONNS` **0**: Database maximum open connections - default is 0, meaning there is no limit.
++- `MAX_IDLE_CONNS` **2**: Max idle database connections on connnection pool, default is 2 - this will be capped to `MAX_OPEN_CONNS`.
++- `CONN_MAX_LIFETIME` **0 or 3s**: Sets the maximum amount of time a DB connection may be reused - default is 0, meaning there is no limit (except on MySQL where it is 3s - see #6804 & #7071).
++  
++Please see #8540 & #8273 for further discussion of the appropriate values for `MAX_OPEN_CONNS`, `MAX_IDLE_CONNS` & `CONN_MAX_LIFETIME` and their
++relation to port exhaustion.
++
++## Indexer (`indexer`)
++
++- `ISSUE_INDEXER_TYPE`: **bleve**: Issue indexer type, currently supported: `bleve`, `db` or `elasticsearch`.
++- `ISSUE_INDEXER_CONN_STR`: ****: Issue indexer connection string, available when ISSUE_INDEXER_TYPE is elasticsearch. i.e. http://elastic:changeme@localhost:9200
++- `ISSUE_INDEXER_NAME`: **gitea_issues**: Issue indexer name, available when ISSUE_INDEXER_TYPE is elasticsearch
++- `ISSUE_INDEXER_PATH`: **indexers/issues.bleve**: Index file used for issue search; available when ISSUE_INDEXER_TYPE is bleve and elasticsearch.
++- The next 4 configuration values are deprecated and should be set in `queue.issue_indexer` however are kept for backwards compatibility:
++- `ISSUE_INDEXER_QUEUE_TYPE`: **levelqueue**: Issue indexer queue, currently supports:`channel`, `levelqueue`, `redis`.
++- `ISSUE_INDEXER_QUEUE_DIR`: **indexers/issues.queue**: When `ISSUE_INDEXER_QUEUE_TYPE` is `levelqueue`, this will be the queue will be saved path.
++- `ISSUE_INDEXER_QUEUE_CONN_STR`: **addrs=127.0.0.1:6379 db=0**: When `ISSUE_INDEXER_QUEUE_TYPE` is `redis`, this will store the redis connection string.
++- `ISSUE_INDEXER_QUEUE_BATCH_NUMBER`: **20**: Batch queue number.
++
++- `REPO_INDEXER_ENABLED`: **false**: Enables code search (uses a lot of disk space, about 6 times more than the repository size).
++- `REPO_INDEXER_PATH`: **indexers/repos.bleve**: Index file used for code search.
++- `REPO_INDEXER_INCLUDE`: **empty**: A comma separated list of glob patterns (see https://github.com/gobwas/glob) to **include** in the index. Use `**.txt` to match any files with .txt extension. An empty list means include all files.
++- `REPO_INDEXER_EXCLUDE`: **empty**: A comma separated list of glob patterns (see https://github.com/gobwas/glob) to **exclude** from the index. Files that match this list will not be indexed, even if they match in `REPO_INDEXER_INCLUDE`.
++- `REPO_INDEXER_EXCLUDE_VENDORED`: **true**: Exclude vendored files from index.
++- `UPDATE_BUFFER_LEN`: **20**: Buffer length of index request.
++- `MAX_FILE_SIZE`: **1048576**: Maximum size in bytes of files to be indexed.
++- `STARTUP_TIMEOUT`: **30s**: If the indexer takes longer than this timeout to start - fail. (This timeout will be added to the hammer time above for child processes - as bleve will not start until the previous parent is shutdown.) Set to zero to never timeout.
++
++## Queue (`queue` and `queue.*`)
++
++- `TYPE`: **persistable-channel**: General queue type, currently support: `persistable-channel`, `channel`, `level`, `redis`, `dummy`
++- `DATADIR`: **queues/**: Base DataDir for storing persistent and level queues. `DATADIR` for inidividual queues can be set in `queue.name` sections but will default to `DATADIR/`**`name`**.
++- `LENGTH`: **20**: Maximal queue size before channel queues block
++- `BATCH_LENGTH`: **20**: Batch data before passing to the handler
++- `CONN_STR`: **addrs=127.0.0.1:6379 db=0**: Connection string for the redis queue type.
++- `QUEUE_NAME`: **_queue**: The suffix for default redis queue name. Individual queues will default to **`name`**`QUEUE_NAME` but can be overriden in the specific `queue.name` section.
++- `SET_NAME`: **_unique**: The suffix that will added to the default redis
++set name for unique queues. Individual queues will default to
++**`name`**`QUEUE_NAME`_`SET_NAME`_ but can be overridden in the specific
++`queue.name` section.
++- `WRAP_IF_NECESSARY`: **true**: Will wrap queues with a timeoutable queue if the selected queue is not ready to be created - (Only relevant for the level queue.)
++- `MAX_ATTEMPTS`: **10**: Maximum number of attempts to create the wrapped queue
++- `TIMEOUT`: **GRACEFUL_HAMMER_TIME + 30s**: Timeout the creation of the wrapped queue if it takes longer than this to create.
++- Queues by default come with a dynamically scaling worker pool. The following settings configure this:
++- `WORKERS`: **1**: Number of initial workers for the queue.
++- `MAX_WORKERS`: **10**: Maximum number of worker go-routines for the queue.
++- `BLOCK_TIMEOUT`: **1s**: If the queue blocks for this time, boost the number of workers - the `BLOCK_TIMEOUT` will then be doubled before boosting again whilst the boost is ongoing.
++- `BOOST_TIMEOUT`: **5m**: Boost workers will timeout after this long.
++- `BOOST_WORKERS`: **5**: This many workers will be added to the worker pool if there is a boost.
++
++## Admin (`admin`)
++- `DEFAULT_EMAIL_NOTIFICATIONS`: **enabled**: Default configuration for email notifications for users (user configurable). Options: enabled, onmention, disabled
++
++## Security (`security`)
++
++- `INSTALL_LOCK`: **false**: Disallow access to the install page.
++- `SECRET_KEY`: **\<random at every install\>**: Global secret key. This should be changed.
++- `LOGIN_REMEMBER_DAYS`: **7**: Cookie lifetime, in days.
++- `COOKIE_USERNAME`: **gitea\_awesome**: Name of the cookie used to store the current username.
++- `COOKIE_REMEMBER_NAME`: **gitea\_incredible**: Name of cookie used to store authentication
++   information.
++- `REVERSE_PROXY_AUTHENTICATION_USER`: **X-WEBAUTH-USER**: Header name for reverse proxy
++   authentication.
++- `REVERSE_PROXY_AUTHENTICATION_EMAIL`: **X-WEBAUTH-EMAIL**: Header name for reverse proxy
++   authentication provided email.
++- `DISABLE_GIT_HOOKS`: **false**: Set to `true` to prevent all users (including admin) from creating custom
++   git hooks.
++- `ONLY_ALLOW_PUSH_IF_GITEA_ENVIRONMENT_SET`: **true**: Set to `false` to allow local users to push to gitea-repositories without setting up the Gitea environment. This is not recommended and if you want local users to push to gitea repositories you should set the environment appropriately.
++- `IMPORT_LOCAL_PATHS`: **false**: Set to `false` to prevent all users (including admin) from importing local path on server.
++- `INTERNAL_TOKEN`: **\<random at every install if no uri set\>**: Secret used to validate communication within Gitea binary.
++- `INTERNAL_TOKEN_URI`: **<empty>**: Instead of defining internal token in the configuration, this configuration option can be used to give Gitea a path to a file that contains the internal token (example value: `file:/etc/gitea/internal_token`)
++- `PASSWORD_HASH_ALGO`: **pbkdf2**: The hash algorithm to use \[pbkdf2, argon2, scrypt, bcrypt\].
++- `CSRF_COOKIE_HTTP_ONLY`: **true**: Set false to allow JavaScript to read CSRF cookie.
++- `PASSWORD_COMPLEXITY`: **lower,upper,digit,spec**: Comma separated list of character classes required to pass minimum complexity. If left empty or no valid values are specified, the default values will be used. Possible values are: 
++    - lower - use one or more lower latin characters
++    - upper - use one or more upper latin characters
++    - digit - use one or more digits
++    - spec - use one or more special characters as ``!"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~``
++    - off - do not check password complexity
++
++## OpenID (`openid`)
++
++- `ENABLE_OPENID_SIGNIN`: **false**: Allow authentication in via OpenID.
++- `ENABLE_OPENID_SIGNUP`: **! DISABLE\_REGISTRATION**: Allow registering via OpenID.
++- `WHITELISTED_URIS`: **\<empty\>**: If non-empty, list of POSIX regex patterns matching
++   OpenID URI's to permit.
++- `BLACKLISTED_URIS`: **\<empty\>**: If non-empty, list of POSIX regex patterns matching
++   OpenID URI's to block.
++
++## Service (`service`)
++
++- `ACTIVE_CODE_LIVE_MINUTES`: **180**: Time limit (min) to confirm account/email registration.
++- `RESET_PASSWD_CODE_LIVE_MINUTES`: **180**: Time limit (min) to confirm forgot password reset
++   process.
++- `REGISTER_EMAIL_CONFIRM`: **false**: Enable this to ask for mail confirmation of registration.
++   Requires `Mailer` to be enabled.
++- `DISABLE_REGISTRATION`: **false**: Disable registration, after which only admin can create
++   accounts for users.
++- `REQUIRE_EXTERNAL_REGISTRATION_PASSWORD`: **false**: Enable this to force externally created
++   accounts (via GitHub, OpenID Connect, etc) to create a password. Warning: enabling this will
++   decrease security, so you should only enable it if you know what you're doing.
++- `REQUIRE_SIGNIN_VIEW`: **false**: Enable this to force users to log in to view any page or to use API.
++- `ENABLE_NOTIFY_MAIL`: **false**: Enable this to send e-mail to watchers of a repository when
++   something happens, like creating issues. Requires `Mailer` to be enabled.
++- `ENABLE_BASIC_AUTHENTICATION`: **true**: Disable this to disallow authenticaton using HTTP
++   BASIC and the user's password. Please note if you disable this you will not be able to access the
++   tokens API endpoints using a password. Further, this only disables BASIC authentication using the
++   password - not tokens or OAuth Basic.
++- `ENABLE_REVERSE_PROXY_AUTHENTICATION`: **false**: Enable this to allow reverse proxy authentication.
++- `ENABLE_REVERSE_PROXY_AUTO_REGISTRATION`: **false**: Enable this to allow auto-registration
++   for reverse authentication.
++- `ENABLE_REVERSE_PROXY_EMAIL`: **false**: Enable this to allow to auto-registration with a
++   provided email rather than a generated email.
++- `ENABLE_CAPTCHA`: **false**: Enable this to use captcha validation for registration.
++- `REQUIRE_EXTERNAL_REGISTRATION_CAPTCHA`: **false**: Enable this to force captcha validation
++   even for External Accounts (i.e. GitHub, OpenID Connect, etc). You must `ENABLE_CAPTCHA` also.
++- `CAPTCHA_TYPE`: **image**: \[image, recaptcha\]
++- `RECAPTCHA_SECRET`: **""**: Go to https://www.google.com/recaptcha/admin to get a secret for recaptcha.
++- `RECAPTCHA_SITEKEY`: **""**: Go to https://www.google.com/recaptcha/admin to get a sitekey for recaptcha.
++- `RECAPTCHA_URL`: **https://www.google.com/recaptcha/**: Set the recaptcha url - allows the use of recaptcha net.
++- `DEFAULT_ENABLE_DEPENDENCIES`: **true**: Enable this to have dependencies enabled by default.
++- `ALLOW_CROSS_REPOSITORY_DEPENDENCIES` : **true** Enable this to allow dependencies on issues from any repository where the user is granted access.
++- `ENABLE_USER_HEATMAP`: **true**: Enable this to display the heatmap on users profiles.
++- `EMAIL_DOMAIN_WHITELIST`: **\<empty\>**: If non-empty, list of domain names that can only be used to register
++  on this instance.
++- `SHOW_REGISTRATION_BUTTON`: **! DISABLE\_REGISTRATION**: Show Registration Button
++- `SHOW_MILESTONES_DASHBOARD_PAGE`: **true** Enable this to show the milestones dashboard page - a view of all the user's milestones
++- `AUTO_WATCH_NEW_REPOS`: **true**: Enable this to let all organisation users watch new repos when they are created
++- `AUTO_WATCH_ON_CHANGES`: **false**: Enable this to make users watch a repository after their first commit to it
++- `DEFAULT_ORG_VISIBILITY`: **public**: Set default visibility mode for organisations, either "public", "limited" or "private".
++- `DEFAULT_ORG_MEMBER_VISIBLE`: **false** True will make the membership of the users visible when added to the organisation.
++- `ALLOW_ONLY_EXTERNAL_REGISTRATION`: **false** Set to true to force registration only using third-party services.
++- `NO_REPLY_ADDRESS`: **DOMAIN** Default value for the domain part of the user's email address in the git log if he has set KeepEmailPrivate to true. 
++  The user's email will be replaced with a concatenation of the user name in lower case, "@" and NO_REPLY_ADDRESS.
++
++## Webhook (`webhook`)
++
++- `QUEUE_LENGTH`: **1000**: Hook task queue length. Use caution when editing this value.
++- `DELIVER_TIMEOUT`: **5**: Delivery timeout (sec) for shooting webhooks.
++- `SKIP_TLS_VERIFY`: **false**: Allow insecure certification.
++- `PAGING_NUM`: **10**: Number of webhook history events that are shown in one page.
++- `PROXY_URL`: ****: Proxy server URL, support http://, https//, socks://, blank will follow environment http_proxy/https_proxy
++- `PROXY_HOSTS`: ****: Comma separated list of host names requiring proxy. Glob patterns (*) are accepted; use ** to match all hosts.
++
++## Mailer (`mailer`)
++
++- `ENABLED`: **false**: Enable to use a mail service.
++- `DISABLE_HELO`: **\<empty\>**: Disable HELO operation.
++- `HELO_HOSTNAME`: **\<empty\>**: Custom hostname for HELO operation.
++- `HOST`: **\<empty\>**: SMTP mail host address and port (example: smtp.gitea.io:587).
++- `FROM`: **\<empty\>**: Mail from address, RFC 5322. This can be just an email address, or
++   the "Name" \<email@example.com\> format.
++- `USER`: **\<empty\>**: Username of mailing user (usually the sender's e-mail address).
++- `PASSWD`: **\<empty\>**: Password of mailing user.  Use \`your password\` for quoting if you use special characters in the password.
++- `SKIP_VERIFY`: **\<empty\>**: Do not verify the self-signed certificates.
++   - **Note:** Gitea only supports SMTP with STARTTLS.
++- `SUBJECT_PREFIX`: **\<empty\>**: Prefix to be placed before e-mail subject lines.
++- `MAILER_TYPE`: **smtp**: \[smtp, sendmail, dummy\]
++   - **smtp** Use SMTP to send mail
++   - **sendmail** Use the operating system's `sendmail` command instead of SMTP.
++   This is common on linux systems.
++   - **dummy** Send email messages to the log as a testing phase.
++   - Note that enabling sendmail will ignore all other `mailer` settings except `ENABLED`,
++     `FROM`, `SUBJECT_PREFIX` and `SENDMAIL_PATH`.
++   - Enabling dummy will ignore all settings except `ENABLED`, `SUBJECT_PREFIX` and `FROM`.
++- `SENDMAIL_PATH`: **sendmail**: The location of sendmail on the operating system (can be
++   command or full path).
++- `SENDMAIL_TIMEOUT`: **5m**: default timeout for sending email through sendmail
++- ``IS_TLS_ENABLED`` :  **false** : Decide if SMTP connections should use TLS.
++
++## Cache (`cache`)
++
++- `ENABLED`: **true**: Enable the cache.
++- `ADAPTER`: **memory**: Cache engine adapter, either `memory`, `redis`, or `memcache`.
++- `INTERVAL`: **60**: Garbage Collection interval (sec), for memory cache only.
++- `HOST`: **\<empty\>**: Connection string for `redis` and `memcache`.
++   - Redis: `network=tcp,addr=127.0.0.1:6379,password=macaron,db=0,pool_size=100,idle_timeout=180`
++   - Memcache: `127.0.0.1:9090;127.0.0.1:9091`
++- `ITEM_TTL`: **16h**: Time to keep items in cache if not used, Setting it to 0 disables caching.
++
++## Cache - LastCommitCache settings (`cache.last_commit`)
++
++- `ENABLED`: **true**: Enable the cache.
++- `ITEM_TTL`: **8760h**: Time to keep items in cache if not used, Setting it to 0 disables caching.
++- `COMMITS_COUNT`: **1000**: Only enable the cache when repository's commits count great than.
++
++## Session (`session`)
++
++- `PROVIDER`: **memory**: Session engine provider \[memory, file, redis, mysql, couchbase, memcache, nodb, postgres\].
++- `PROVIDER_CONFIG`: **data/sessions**: For file, the root path; for others, the connection string.
++- `COOKIE_SECURE`: **false**: Enable this to force using HTTPS for all session access.
++- `COOKIE_NAME`: **i\_like\_gitea**: The name of the cookie used for the session ID.
++- `GC_INTERVAL_TIME`: **86400**: GC interval in seconds.
++
++## Picture (`picture`)
++
++- `GRAVATAR_SOURCE`: **gravatar**: Can be `gravatar`, `duoshuo` or anything like
++   `http://cn.gravatar.com/avatar/`.
++- `DISABLE_GRAVATAR`: **false**: Enable this to use local avatars only.
++- `ENABLE_FEDERATED_AVATAR`: **false**: Enable support for federated avatars (see
++   [http://www.libravatar.org](http://www.libravatar.org)).
++- `AVATAR_UPLOAD_PATH`: **data/avatars**: Path to store user avatar image files.
++- `REPOSITORY_AVATAR_UPLOAD_PATH`: **data/repo-avatars**: Path to store repository avatar image files.
++- `REPOSITORY_AVATAR_FALLBACK`: **none**: How Gitea deals with missing repository avatars
++  - none = no avatar will be displayed
++  - random = random avatar will be generated
++  - image = default image will be used (which is set in `REPOSITORY_AVATAR_DEFAULT_IMAGE`)
++- `REPOSITORY_AVATAR_FALLBACK_IMAGE`: **/img/repo_default.png**: Image used as default repository avatar (if `REPOSITORY_AVATAR_FALLBACK` is set to image and none was uploaded)
++- `AVATAR_MAX_WIDTH`: **4096**: Maximum avatar image width in pixels.
++- `AVATAR_MAX_HEIGHT`: **3072**: Maximum avatar image height in pixels.
++- `AVATAR_MAX_FILE_SIZE`: **1048576** (1Mb): Maximum avatar image file size in bytes.
++
++## Attachment (`attachment`)
++
++- `ENABLED`: **true**: Enable this to allow uploading attachments.
++- `PATH`: **data/attachments**: Path to store attachments.
++- `ALLOWED_TYPES`: **see app.ini.sample**: Allowed MIME types, e.g. `image/jpeg|image/png`.
++   Use `*/*` for all types.
++- `MAX_SIZE`: **4**: Maximum size (MB).
++- `MAX_FILES`: **5**: Maximum number of attachments that can be uploaded at once.
++
++## Log (`log`)
++
++- `ROOT_PATH`: **\<empty\>**: Root path for log files.
++- `MODE`: **console**: Logging mode. For multiple modes, use a comma to separate values. You can configure each mode in per mode log subsections `\[log.modename\]`. By default the file mode will log to `$ROOT_PATH/gitea.log`.
++- `LEVEL`: **Info**: General log level. \[Trace, Debug, Info, Warn, Error, Critical, Fatal, None\]
++- `STACKTRACE_LEVEL`: **None**: Default log level at which to log create stack traces. \[Trace, Debug, Info, Warn, Error, Critical, Fatal, None\]
++- `REDIRECT_MACARON_LOG`: **false**: Redirects the Macaron log to its own logger or the default logger.
++- `MACARON`: **file**: Logging mode for the macaron logger, use a comma to separate values. Configure each mode in per mode log subsections `\[log.modename.macaron\]`. By default the file mode will log to `$ROOT_PATH/macaron.log`. (If you set this to `,` it will log to default gitea logger.)
++- `ROUTER_LOG_LEVEL`: **Info**: The log level that the router should log at. (If you are setting the access log, its recommended to place this at Debug.)
++- `ROUTER`: **console**: The mode or name of the log the router should log to. (If you set this to `,` it will log to default gitea logger.)
++NB: You must `REDIRECT_MACARON_LOG` and have `DISABLE_ROUTER_LOG` set to `false` for this option to take effect. Configure each mode in per mode log subsections `\[log.modename.router\]`.
++- `ENABLE_ACCESS_LOG`: **false**: Creates an access.log in NCSA common log format, or as per the following template
++- `ACCESS`: **file**: Logging mode for the access logger, use a comma to separate values. Configure each mode in per mode log subsections `\[log.modename.access\]`. By default the file mode will log to `$ROOT_PATH/access.log`. (If you set this to `,` it will log to the default gitea logger.)
++- `ACCESS_LOG_TEMPLATE`: **`{{.Ctx.RemoteAddr}} - {{.Identity}} {{.Start.Format "[02/Jan/2006:15:04:05 -0700]" }} "{{.Ctx.Req.Method}} {{.Ctx.Req.URL.RequestURI}} {{.Ctx.Req.Proto}}" {{.ResponseWriter.Status}} {{.ResponseWriter.Size}} "{{.Ctx.Req.Referer}}\" \"{{.Ctx.Req.UserAgent}}"`**: Sets the template used to create the access log.
++  - The following variables are available:
++  - `Ctx`: the `macaron.Context` of the request.
++  - `Identity`: the SignedUserName or `"-"` if not logged in.
++  - `Start`: the start time of the request.
++  - `ResponseWriter`: the responseWriter from the request.
++  - You must be very careful to ensure that this template does not throw errors or panics as this template runs outside of the panic/recovery script.
++- `ENABLE_XORM_LOG`: **true**: Set whether to perform XORM logging. Please note SQL statement logging can be disabled by setting `LOG_SQL` to false in the `[database]` section.
++
++### Log subsections (`log.name`, `log.name.*`)
++
++- `LEVEL`: **log.LEVEL**: Sets the log-level of this sublogger. Defaults to the `LEVEL` set in the global `[log]` section.
++- `STACKTRACE_LEVEL`: **log.STACKTRACE_LEVEL**: Sets the log level at which to log stack traces.
++- `MODE`: **name**: Sets the mode of this sublogger - Defaults to the provided subsection name. This allows you to have two different file loggers at different levels.
++- `EXPRESSION`: **""**: A regular expression to match either the function name, file or message. Defaults to empty. Only log messages that match the expression will be saved in the logger.
++- `FLAGS`: **stdflags**: A comma separated string representing the log flags. Defaults to `stdflags` which represents the prefix: `2009/01/23 01:23:23 ...a/b/c/d.go:23:runtime.Caller() [I]: message`. `none` means don't prefix log lines. See `modules/log/base.go` for more information.
++- `PREFIX`: **""**: An additional prefix for every log line in this logger. Defaults to empty.
++- `COLORIZE`: **false**: Colorize the log lines by default
++
++### Console log mode (`log.console`, `log.console.*`, or `MODE=console`)
++
++- For the console logger `COLORIZE` will default to `true` if not on windows or the terminal is determined to be able to color.
++- `STDERR`: **false**: Use Stderr instead of Stdout.
++
++### File log mode (`log.file`, `log.file.*` or `MODE=file`)
++
++- `FILE_NAME`: Set the file name for this logger. Defaults as described above. If relative will be relative to the `ROOT_PATH`
++- `LOG_ROTATE`: **true**: Rotate the log files.
++- `MAX_SIZE_SHIFT`: **28**: Maximum size shift of a single file, 28 represents 256Mb.
++- `DAILY_ROTATE`: **true**: Rotate logs daily.
++- `MAX_DAYS`: **7**: Delete the log file after n days
++- `COMPRESS`: **true**: Compress old log files by default with gzip
++- `COMPRESSION_LEVEL`: **-1**: Compression level
++
++### Conn log mode (`log.conn`, `log.conn.*` or `MODE=conn`)
++
++- `RECONNECT_ON_MSG`: **false**: Reconnect host for every single message.
++- `RECONNECT`: **false**: Try to reconnect when connection is lost.
++- `PROTOCOL`: **tcp**: Set the protocol, either "tcp", "unix" or "udp".
++- `ADDR`: **:7020**: Sets the address to connect to.
++
++### SMTP log mode (`log.smtp`, `log.smtp.*` or `MODE=smtp`)
++
++- `USER`: User email address to send from.
++- `PASSWD`: Password for the smtp server.
++- `HOST`: **127.0.0.1:25**: The SMTP host to connect to.
++- `RECEIVERS`: Email addresses to send to.
++- `SUBJECT`: **Diagnostic message from Gitea**
++
++## Cron (`cron`)
++
++- `ENABLED`: **true**: Run cron tasks periodically.
++- `RUN_AT_START`: **false**: Run cron tasks at application start-up.
++
++### Cron - Cleanup old repository archives (`cron.archive_cleanup`)
++
++- `ENABLED`: **true**: Enable service.
++- `RUN_AT_START`: **true**: Run tasks at start up time (if ENABLED).
++- `SCHEDULE`: **@every 24h**: Cron syntax for scheduling repository archive cleanup, e.g. `@every 1h`.
++- `OLDER_THAN`: **24h**: Archives created more than `OLDER_THAN` ago are subject to deletion, e.g. `12h`.
++
++### Cron - Update Mirrors (`cron.update_mirrors`)
++
++- `SCHEDULE`: **@every 10m**: Cron syntax for scheduling update mirrors, e.g. `@every 3h`.
++
++### Cron - Repository Health Check (`cron.repo_health_check`)
++
++- `SCHEDULE`: **@every 24h**: Cron syntax for scheduling repository health check.
++- `TIMEOUT`: **60s**: Time duration syntax for health check execution timeout.
++- `ARGS`: **\<empty\>**: Arguments for command `git fsck`, e.g. `--unreachable --tags`. See more on http://git-scm.com/docs/git-fsck
++
++### Cron - Repository Statistics Check (`cron.check_repo_stats`)
++
++- `RUN_AT_START`: **true**: Run repository statistics check at start time.
++- `SCHEDULE`: **@every 24h**: Cron syntax for scheduling repository statistics check.
++
++### Cron - Update Migration Poster ID (`cron.update_migration_poster_id`)
++
++- `SCHEDULE`: **@every 24h** : Interval as a duration between each synchronization, it will always attempt synchronization when the instance starts.
++
++## Git (`git`)
++
++- `PATH`: **""**: The path of git executable. If empty, Gitea searches through the PATH environment.
++- `MAX_GIT_DIFF_LINES`: **100**: Max number of lines allowed of a single file in diff view.
++- `MAX_GIT_DIFF_LINE_CHARACTERS`: **5000**: Max character count per line highlighted in diff view.
++- `MAX_GIT_DIFF_FILES`: **100**: Max number of files shown in diff view.
++- `GC_ARGS`: **\<empty\>**: Arguments for command `git gc`, e.g. `--aggressive --auto`. See more on http://git-scm.com/docs/git-gc/
++- `ENABLE_AUTO_GIT_WIRE_PROTOCOL`: **true**: If use git wire protocol version 2 when git version >= 2.18, default is true, set to false when you always want git wire protocol version 1
++- `PULL_REQUEST_PUSH_MESSAGE`: **true**: Respond to pushes to a non-default branch with a URL for creating a Pull Request (if the repository has them enabled)
++- `VERBOSE_PUSH`: **true**: Print status information about pushes as they are being processed.
++- `VERBOSE_PUSH_DELAY`: **5s**: Only print verbose information if push takes longer than this delay.
++
++## Git - Timeout settings (`git.timeout`)
++- `DEFAUlT`: **360**: Git operations default timeout seconds.
++- `MIGRATE`: **600**: Migrate external repositories timeout seconds.
++- `MIRROR`: **300**: Mirror external repositories timeout seconds.
++- `CLONE`: **300**: Git clone from internal repositories timeout seconds.
++- `PULL`: **300**: Git pull from internal repositories timeout seconds.
++- `GC`: **60**: Git repository GC timeout seconds.
++
++## Metrics (`metrics`)
++
++- `ENABLED`: **false**: Enables /metrics endpoint for prometheus.
++- `TOKEN`: **\<empty\>**: You need to specify the token, if you want to include in the authorization the metrics . The same token need to be used in prometheus parameters `bearer_token` or `bearer_token_file`.
++
++## API (`api`)
++
++- `ENABLE_SWAGGER`: **true**: Enables /api/swagger, /api/v1/swagger etc. endpoints. True or false; default is true.
++- `MAX_RESPONSE_ITEMS`: **50**: Max number of items in a page.
++- `DEFAULT_PAGING_NUM`: **30**: Default paging number of API.
++- `DEFAULT_GIT_TREES_PER_PAGE`: **1000**: Default and maximum number of items per page for git trees API.
++- `DEFAULT_MAX_BLOB_SIZE`: **10485760**: Default max size of a blob that can be return by the blobs API.
++
++## OAuth2 (`oauth2`)
++
++- `ENABLE`: **true**: Enables OAuth2 provider.
++- `ACCESS_TOKEN_EXPIRATION_TIME`: **3600**: Lifetime of an OAuth2 access token in seconds
++- `REFRESH_TOKEN_EXPIRATION_TIME`: **730**: Lifetime of an OAuth2 access token in hours
++- `INVALIDATE_REFRESH_TOKEN`: **false**: Check if refresh token got already used
++- `JWT_SECRET`: **\<empty\>**: OAuth2 authentication secret for access and refresh tokens, change this a unique string.
++- `MAX_TOKEN_LENGTH`: **32767**: Maximum length of token/cookie to accept from OAuth2 provider
++
++## i18n (`i18n`)
++
++- `LANGS`: **en-US,zh-CN,zh-HK,zh-TW,de-DE,fr-FR,nl-NL,lv-LV,ru-RU,ja-JP,es-ES,pt-BR,pl-PL,bg-BG,it-IT,fi-FI,tr-TR,cs-CZ,sr-SP,sv-SE,ko-KR**: List of locales shown in language selector
++- `NAMES`: **English,简体中文,繁體中文（香港）,繁體中文（台灣）,Deutsch,français,Nederlands,latviešu,русский,日本語,español,português do Brasil,polski,български,italiano,suomi,Türkçe,čeština,српски,svenska,한국어**: Visible names corresponding to the locales
++
++### i18n - Datepicker Language (`i18n.datelang`)
++Maps locales to the languages used by the datepicker plugin
++
++- `en-US`: **en**
++- `zh-CN`: **zh**
++- `zh-HK`: **zh-HK**
++- `zh-TW`: **zh-TW**
++- `de-DE`: **de**
++- `fr-FR`: **fr**
++- `nl-NL`: **nl**
++- `lv-LV`: **lv**
++- `ru-RU`: **ru**
++- `ja-JP`: **ja**
++- `es-ES`: **es**
++- `pt-BR`: **pt-BR**
++- `pl-PL`: **pl**
++- `bg-BG`: **bg**
++- `it-IT`: **it**
++- `fi-FI`: **fi**
++- `tr-TR`: **tr**
++- `cs-CZ`: **cs-CZ**
++- `sr-SP`: **sr**
++- `sv-SE`: **sv**
++- `ko-KR`: **ko**
++
++## U2F (`U2F`)
++- `APP_ID`: **`ROOT_URL`**: Declares the facet of the application. Requires HTTPS.
++- `TRUSTED_FACETS`: List of additional facets which are trusted. This is not support by all browsers.
++
++## Markup (`markup`)
++
++Gitea can support Markup using external tools. The example below will add a markup named `asciidoc`.
++
++```ini
++[markup.asciidoc]
++ENABLED = true
++FILE_EXTENSIONS = .adoc,.asciidoc
++RENDER_COMMAND = "asciidoc --out-file=- -"
++IS_INPUT_FILE = false
++```
++
++- ENABLED: **false** Enable markup support; set to **true** to enable this renderer.
++- FILE\_EXTENSIONS: **\<empty\>** List of file extensions that should be rendered by an external
++   command. Multiple extentions needs a comma as splitter.
++- RENDER\_COMMAND: External command to render all matching extensions.
++- IS\_INPUT\_FILE: **false** Input is not a standard input but a file param followed `RENDER_COMMAND`.
++
++Two special environment variables are passed to the render command:
++- `GITEA_PREFIX_SRC`, which contains the current URL prefix in the `src` path tree. To be used as prefix for links.
++- `GITEA_PREFIX_RAW`, which contains the current URL prefix in the `raw` path tree. To be used as prefix for image paths.
++
++
++Gitea supports customizing the sanitization policy for rendered HTML. The example below will support KaTeX output from pandoc.
++
++```ini
++[markup.sanitizer.TeX]
++; Pandoc renders TeX segments as <span>s with the "math" class, optionally
++; with "inline" or "display" classes depending on context.
++ELEMENT = span
++ALLOW_ATTR = class
++REGEXP = ^\s*((math(\s+|$)|inline(\s+|$)|display(\s+|$)))+
++```
++
++ - `ELEMENT`: The element this policy applies to. Must be non-empty.
++ - `ALLOW_ATTR`: The attribute this policy allows. Must be non-empty.
++ - `REGEXP`: A regex to match the contents of the attribute against. Must be present but may be empty for unconditional whitelisting of this attribute.
++
++Multiple sanitisation rules can be defined by adding unique subsections, e.g. `[markup.sanitizer.TeX-2]`.
++
++## Time (`time`)
++
++- `FORMAT`: Time format to diplay on UI. i.e. RFC1123 or 2006-01-02 15:04:05
++- `DEFAULT_UI_LOCATION`: Default location of time on the UI, so that we can display correct user's time on UI. i.e. Shanghai/Asia
++
++## Task (`task`)
++
++Task queue configuration has been moved to `queue.task`. However, the below configuration values are kept for backwards compatibility:
++
++- `QUEUE_TYPE`: **channel**: Task queue type, could be `channel` or `redis`.
++- `QUEUE_LENGTH`: **1000**: Task queue length, available only when `QUEUE_TYPE` is `channel`.
++- `QUEUE_CONN_STR`: **addrs=127.0.0.1:6379 db=0**: Task queue connection string, available only when `QUEUE_TYPE` is `redis`. If redis needs a password, use `addrs=127.0.0.1:6379 password=123 db=0`.
++
++## Migrations (`migrations`)
++
++- `MAX_ATTEMPTS`: **3**: Max attempts per http/https request on migrations.
++- `RETRY_BACKOFF`: **3**: Backoff time per http/https request retry (seconds)
++
++## Other (`other`)
++
++- `SHOW_FOOTER_BRANDING`: **false**: Show Gitea branding in the footer.
++- `SHOW_FOOTER_VERSION`: **true**: Show Gitea version information in the footer.
++- `SHOW_FOOTER_TEMPLATE_LOAD_TIME`: **true**: Show time of template execution in the footer.
+diff --git a/docs/con
\ No newline at end of file
diff --git a/modules/indexer/code/bleve.go b/modules/indexer/code/bleve.go
index 576cc3e5e..660356a40 100644
--- a/modules/indexer/code/bleve.go
+++ b/modules/indexer/code/bleve.go
@@ -57,10 +57,10 @@ func addUnicodeNormalizeTokenFilter(m *mapping.IndexMappingImpl) error {
 	})
 }
 
-// openIndexer open the index at the specified path, checking for metadata
+// openBleveIndexer open the index at the specified path, checking for metadata
 // updates and bleve version updates.  If index needs to be created (or
 // re-created), returns (nil, nil)
-func openIndexer(path string, latestVersion int) (bleve.Index, error) {
+func openBleveIndexer(path string, latestVersion int) (bleve.Index, error) {
 	_, err := os.Stat(path)
 	if err != nil && os.IsNotExist(err) {
 		return nil, nil
@@ -103,54 +103,14 @@ func (d *RepoIndexerData) Type() string {
 	return repoIndexerDocType
 }
 
-func addUpdate(commitSha string, update fileUpdate, repo *models.Repository, batch rupture.FlushingBatch) error {
-	// Ignore vendored files in code search
-	if setting.Indexer.ExcludeVendored && enry.IsVendor(update.Filename) {
-		return nil
-	}
-	stdout, err := git.NewCommand("cat-file", "-s", update.BlobSha).
-		RunInDir(repo.RepoPath())
-	if err != nil {
-		return err
-	}
-	if size, err := strconv.Atoi(strings.TrimSpace(stdout)); err != nil {
-		return fmt.Errorf("Misformatted git cat-file output: %v", err)
-	} else if int64(size) > setting.Indexer.MaxIndexerFileSize {
-		return addDelete(update.Filename, repo, batch)
-	}
-
-	fileContents, err := git.NewCommand("cat-file", "blob", update.BlobSha).
-		RunInDirBytes(repo.RepoPath())
-	if err != nil {
-		return err
-	} else if !base.IsTextFile(fileContents) {
-		// FIXME: UTF-16 files will probably fail here
-		return nil
-	}
-
-	id := filenameIndexerID(repo.ID, update.Filename)
-	return batch.Index(id, &RepoIndexerData{
-		RepoID:    repo.ID,
-		CommitID:  commitSha,
-		Content:   string(charset.ToUTF8DropErrors(fileContents)),
-		Language:  analyze.GetCodeLanguage(update.Filename, fileContents),
-		UpdatedAt: time.Now().UTC(),
-	})
-}
-
-func addDelete(filename string, repo *models.Repository, batch rupture.FlushingBatch) error {
-	id := filenameIndexerID(repo.ID, filename)
-	return batch.Delete(id)
-}
-
 const (
 	repoIndexerAnalyzer      = "repoIndexerAnalyzer"
 	repoIndexerDocType       = "repoIndexerDocType"
 	repoIndexerLatestVersion = 5
 )
 
-// createRepoIndexer create a repo indexer if one does not already exist
-func createRepoIndexer(path string, latestVersion int) (bleve.Index, error) {
+// createBleveIndexer create a bleve repo indexer if one does not already exist
+func createBleveIndexer(path string, latestVersion int) (bleve.Index, error) {
 	docMapping := bleve.NewDocumentMapping()
 	numericFieldMapping := bleve.NewNumericFieldMapping()
 	numericFieldMapping.IncludeInAll = false
@@ -198,18 +158,6 @@ func createRepoIndexer(path string, latestVersion int) (bleve.Index, error) {
 	return indexer, nil
 }
 
-func filenameIndexerID(repoID int64, filename string) string {
-	return indexerID(repoID) + "_" + filename
-}
-
-func filenameOfIndexerID(indexerID string) string {
-	index := strings.IndexByte(indexerID, '_')
-	if index == -1 {
-		log.Error("Unexpected ID in repo indexer: %s", indexerID)
-	}
-	return indexerID[index+1:]
-}
-
 var (
 	_ Indexer = &BleveIndexer{}
 )
@@ -229,10 +177,51 @@ func NewBleveIndexer(indexDir string) (*BleveIndexer, bool, error) {
 	return indexer, created, err
 }
 
+func (b *BleveIndexer) addUpdate(commitSha string, update fileUpdate, repo *models.Repository, batch rupture.FlushingBatch) error {
+	// Ignore vendored files in code search
+	if setting.Indexer.ExcludeVendored && enry.IsVendor(update.Filename) {
+		return nil
+	}
+
+	stdout, err := git.NewCommand("cat-file", "-s", update.BlobSha).
+		RunInDir(repo.RepoPath())
+	if err != nil {
+		return err
+	}
+	if size, err := strconv.Atoi(strings.TrimSpace(stdout)); err != nil {
+		return fmt.Errorf("Misformatted git cat-file output: %v", err)
+	} else if int64(size) > setting.Indexer.MaxIndexerFileSize {
+		return b.addDelete(update.Filename, repo, batch)
+	}
+
+	fileContents, err := git.NewCommand("cat-file", "blob", update.BlobSha).
+		RunInDirBytes(repo.RepoPath())
+	if err != nil {
+		return err
+	} else if !base.IsTextFile(fileContents) {
+		// FIXME: UTF-16 files will probably fail here
+		return nil
+	}
+
+	id := filenameIndexerID(repo.ID, update.Filename)
+	return batch.Index(id, &RepoIndexerData{
+		RepoID:    repo.ID,
+		CommitID:  commitSha,
+		Content:   string(charset.ToUTF8DropErrors(fileContents)),
+		Language:  analyze.GetCodeLanguage(update.Filename, fileContents),
+		UpdatedAt: time.Now().UTC(),
+	})
+}
+
+func (b *BleveIndexer) addDelete(filename string, repo *models.Repository, batch rupture.FlushingBatch) error {
+	id := filenameIndexerID(repo.ID, filename)
+	return batch.Delete(id)
+}
+
 // init init the indexer
 func (b *BleveIndexer) init() (bool, error) {
 	var err error
-	b.indexer, err = openIndexer(b.indexDir, repoIndexerLatestVersion)
+	b.indexer, err = openBleveIndexer(b.indexDir, repoIndexerLatestVersion)
 	if err != nil {
 		return false, err
 	}
@@ -240,7 +229,7 @@ func (b *BleveIndexer) init() (bool, error) {
 		return false, nil
 	}
 
-	b.indexer, err = createRepoIndexer(b.indexDir, repoIndexerLatestVersion)
+	b.indexer, err = createBleveIndexer(b.indexDir, repoIndexerLatestVersion)
 	if err != nil {
 		return false, err
 	}
@@ -261,38 +250,19 @@ func (b *BleveIndexer) Close() {
 }
 
 // Index indexes the data
-func (b *BleveIndexer) Index(repoID int64) error {
-	repo, err := models.GetRepositoryByID(repoID)
-	if err != nil {
-		return err
-	}
-
-	sha, err := getDefaultBranchSha(repo)
-	if err != nil {
-		return err
-	}
-	changes, err := getRepoChanges(repo, sha)
-	if err != nil {
-		return err
-	} else if changes == nil {
-		return nil
-	}
-
+func (b *BleveIndexer) Index(repo *models.Repository, sha string, changes *repoChanges) error {
 	batch := rupture.NewFlushingBatch(b.indexer, maxBatchSize)
 	for _, update := range changes.Updates {
-		if err := addUpdate(sha, update, repo, batch); err != nil {
+		if err := b.addUpdate(sha, update, repo, batch); err != nil {
 			return err
 		}
 	}
 	for _, filename := range changes.RemovedFilenames {
-		if err := addDelete(filename, repo, batch); err != nil {
+		if err := b.addDelete(filename, repo, batch); err != nil {
 			return err
 		}
 	}
-	if err = batch.Flush(); err != nil {
-		return err
-	}
-	return repo.UpdateIndexerStatus(models.RepoIndexerTypeCode, sha)
+	return batch.Flush()
 }
 
 // Delete deletes indexes by ids
@@ -384,8 +354,7 @@ func (b *BleveIndexer) Search(repoIDs []int64, language, keyword string, page, p
 		}
 		searchResults[i] = &SearchResult{
 			RepoID:      int64(hit.Fields["RepoID"].(float64)),
-			StartIndex:  startIndex,
-			EndIndex:    endIndex,
+			Positions:   []SearchResultPosition{{StartIndex: startIndex, EndIndex: endIndex}},
 			Filename:    filenameOfIndexerID(hit.ID),
 			Content:     hit.Fields["Content"].(string),
 			CommitID:    hit.Fields["CommitID"].(string),
diff --git a/modules/indexer/code/bleve_test.go b/modules/indexer/code/bleve_test.go
index 89cfceea2..0fa2757c9 100644
--- a/modules/indexer/code/bleve_test.go
+++ b/modules/indexer/code/bleve_test.go
@@ -7,20 +7,14 @@ package code
 import (
 	"io/ioutil"
 	"os"
-	"path/filepath"
 	"testing"
 
 	"code.gitea.io/gitea/models"
-	"code.gitea.io/gitea/modules/setting"
 
 	"github.com/stretchr/testify/assert"
 )
 
-func TestMain(m *testing.M) {
-	models.MainTest(m, filepath.Join("..", "..", ".."))
-}
-
-func TestIndexAndSearch(t *testing.T) {
+func TestBleveIndexAndSearch(t *testing.T) {
 	models.PrepareTestEnv(t)
 
 	dir, err := ioutil.TempDir("", "bleve.index")
@@ -31,10 +25,9 @@ func TestIndexAndSearch(t *testing.T) {
 	}
 	defer os.RemoveAll(dir)
 
-	setting.Indexer.RepoIndexerEnabled = true
 	idx, _, err := NewBleveIndexer(dir)
 	if err != nil {
-		assert.Fail(t, "Unable to create indexer Error: %v", err)
+		assert.Fail(t, "Unable to create bleve indexer Error: %v", err)
 		if idx != nil {
 			idx.Close()
 		}
@@ -42,45 +35,5 @@ func TestIndexAndSearch(t *testing.T) {
 	}
 	defer idx.Close()
 
-	err = idx.Index(1)
-	assert.NoError(t, err)
-
-	var (
-		keywords = []struct {
-			Keyword string
-			IDs     []int64
-			Langs   int
-		}{
-			{
-				Keyword: "Description",
-				IDs:     []int64{1},
-				Langs:   1,
-			},
-			{
-				Keyword: "repo1",
-				IDs:     []int64{1},
-				Langs:   1,
-			},
-			{
-				Keyword: "non-exist",
-				IDs:     []int64{},
-				Langs:   0,
-			},
-		}
-	)
-
-	for _, kw := range keywords {
-		total, res, langs, err := idx.Search(nil, "", kw.Keyword, 1, 10)
-		assert.NoError(t, err)
-		assert.EqualValues(t, len(kw.IDs), total)
-
-		assert.NotNil(t, langs)
-		assert.Len(t, langs, kw.Langs)
-
-		var ids = make([]int64, 0, len(res))
-		for _, hit := range res {
-			ids = append(ids, hit.RepoID)
-		}
-		assert.EqualValues(t, kw.IDs, ids)
-	}
+	testIndexer("beleve", t, idx)
 }
diff --git a/modules/indexer/code/elastic_search.go b/modules/indexer/code/elastic_search.go
new file mode 100644
index 000000000..0b648f1c5
--- /dev/null
+++ b/modules/indexer/code/elastic_search.go
@@ -0,0 +1,399 @@
+// Copyright 2020 The Gitea Authors. All rights reserved.
+// Use of this source code is governed by a MIT-style
+// license that can be found in the LICENSE file.
+
+package code
+
+import (
+	"context"
+	"encoding/json"
+	"errors"
+	"fmt"
+	"strconv"
+	"strings"
+	"time"
+
+	"code.gitea.io/gitea/models"
+	"code.gitea.io/gitea/modules/analyze"
+	"code.gitea.io/gitea/modules/base"
+	"code.gitea.io/gitea/modules/charset"
+	"code.gitea.io/gitea/modules/git"
+	"code.gitea.io/gitea/modules/log"
+	"code.gitea.io/gitea/modules/setting"
+	"code.gitea.io/gitea/modules/timeutil"
+
+	"github.com/olivere/elastic/v7"
+	"github.com/src-d/enry/v2"
+)
+
+var (
+	_ Indexer = &ElasticSearchIndexer{}
+)
+
+// ElasticSearchIndexer implements Indexer interface
+type ElasticSearchIndexer struct {
+	client      *elastic.Client
+	indexerName string
+}
+
+type elasticLogger struct {
+	*log.Logger
+}
+
+func (l elasticLogger) Printf(format string, args ...interface{}) {
+	_ = l.Logger.Log(2, l.Logger.GetLevel(), format, args...)
+}
+
+// NewElasticSearchIndexer creates a new elasticsearch indexer
+func NewElasticSearchIndexer(url, indexerName string) (*ElasticSearchIndexer, bool, error) {
+	opts := []elastic.ClientOptionFunc{
+		elastic.SetURL(url),
+		elastic.SetSniff(false),
+		elastic.SetHealthcheckInterval(10 * time.Second),
+		elastic.SetGzip(false),
+	}
+
+	logger := elasticLogger{log.GetLogger(log.DEFAULT)}
+
+	if logger.GetLevel() == log.TRACE || logger.GetLevel() == log.DEBUG {
+		opts = append(opts, elastic.SetTraceLog(logger))
+	} else if logger.GetLevel() == log.ERROR || logger.GetLevel() == log.CRITICAL || logger.GetLevel() == log.FATAL {
+		opts = append(opts, elastic.SetErrorLog(logger))
+	} else if logger.GetLevel() == log.INFO || logger.GetLevel() == log.WARN {
+		opts = append(opts, elastic.SetInfoLog(logger))
+	}
+
+	client, err := elastic.NewClient(opts...)
+	if err != nil {
+		return nil, false, err
+	}
+
+	indexer := &ElasticSearchIndexer{
+		client:      client,
+		indexerName: indexerName,
+	}
+	exists, err := indexer.init()
+
+	return indexer, exists, err
+}
+
+const (
+	defaultMapping = `{
+		"mappings": {
+			"properties": {
+				"repo_id": {
+					"type": "long",
+					"index": true
+				},
+				"content": {
+					"type": "text",
+					"index": true
+				},
+				"commit_id": {
+					"type": "keyword",
+					"index": true
+				},
+				"language": {
+					"type": "keyword",
+					"index": true
+				},
+				"updated_at": {
+					"type": "long",
+					"index": true
+				}
+			}
+		}
+	}`
+)
+
+// Init will initialize the indexer
+func (b *ElasticSearchIndexer) init() (bool, error) {
+	ctx := context.Background()
+	exists, err := b.client.IndexExists(b.indexerName).Do(ctx)
+	if err != nil {
+		return false, err
+	}
+	if exists {
+		return true, nil
+	}
+
+	var mapping = defaultMapping
+
+	createIndex, err := b.client.CreateIndex(b.indexerName).BodyString(mapping).Do(ctx)
+	if err != nil {
+		return false, err
+	}
+	if !createIndex.Acknowledged {
+		return false, errors.New("init failed")
+	}
+
+	return false, nil
+}
+
+func (b *ElasticSearchIndexer) addUpdate(sha string, update fileUpdate, repo *models.Repository) ([]elastic.BulkableRequest, error) {
+	stdout, err := git.NewCommand("cat-file", "-s", update.BlobSha).
+		RunInDir(repo.RepoPath())
+	if err != nil {
+		return nil, err
+	}
+	if size, err := strconv.Atoi(strings.TrimSpace(stdout)); err != nil {
+		return nil, fmt.Errorf("Misformatted git cat-file output: %v", err)
+	} else if int64(size) > setting.Indexer.MaxIndexerFileSize {
+		return b.addDelete(update.Filename, repo)
+	}
+
+	fileContents, err := git.NewCommand("cat-file", "blob", update.BlobSha).
+		RunInDirBytes(repo.RepoPath())
+	if err != nil {
+		return nil, err
+	} else if !base.IsTextFile(fileContents) {
+		// FIXME: UTF-16 files will probably fail here
+		return nil, nil
+	}
+
+	id := filenameIndexerID(repo.ID, update.Filename)
+
+	return []elastic.BulkableRequest{
+		elastic.NewBulkIndexRequest().
+			Index(b.indexerName).
+			Id(id).
+			Doc(map[string]interface{}{
+				"repo_id":    repo.ID,
+				"content":    string(charset.ToUTF8DropErrors(fileContents)),
+				"commit_id":  sha,
+				"language":   analyze.GetCodeLanguage(update.Filename, fileContents),
+				"updated_at": timeutil.TimeStampNow(),
+			}),
+	}, nil
+}
+
+func (b *ElasticSearchIndexer) addDelete(filename string, repo *models.Repository) ([]elastic.BulkableRequest, error) {
+	id := filenameIndexerID(repo.ID, filename)
+	return []elastic.BulkableRequest{
+		elastic.NewBulkDeleteRequest().
+			Index(b.indexerName).
+			Id(id),
+	}, nil
+}
+
+// Index will save the index data
+func (b *ElasticSearchIndexer) Index(repo *models.Repository, sha string, changes *repoChanges) error {
+	reqs := make([]elastic.BulkableRequest, 0)
+	for _, update := range changes.Updates {
+		updateReqs, err := b.addUpdate(sha, update, repo)
+		if err != nil {
+			return err
+		}
+		if len(updateReqs) > 0 {
+			reqs = append(reqs, updateReqs...)
+		}
+	}
+
+	for _, filename := range changes.RemovedFilenames {
+		delReqs, err := b.addDelete(filename, repo)
+		if err != nil {
+			return err
+		}
+		if len(delReqs) > 0 {
+			reqs = append(reqs, delReqs...)
+		}
+	}
+
+	if len(reqs) > 0 {
+		_, err := b.client.Bulk().
+			Index(b.indexerName).
+			Add(reqs...).
+			Do(context.Background())
+		return err
+	}
+	return nil
+}
+
+// Delete deletes indexes by ids
+func (b *ElasticSearchIndexer) Delete(repoID int64) error {
+	_, err := b.client.DeleteByQuery(b.indexerName).
+		Query(elastic.NewTermsQuery("repo_id", repoID)).
+		Do(context.Background())
+	return err
+}
+
+func convertResult(searchResult *elastic.SearchResult, kw string, pageSize int) (int64, []*SearchResult, []*SearchResultLanguages, error) {
+	hits := make([]*SearchResult, 0, pageSize)
+	for _, hit := range searchResult.Hits.Hits {
+		repoID, fileName := parseIndexerID(hit.Id)
+		var res = make(map[string]interface{})
+		if err := json.Unmarshal(hit.Source, &res); err != nil {
+			return 0, nil, nil, err
+		}
+
+		language := res["language"].(string)
+		commitId := res["commit_id"].(string)
+		content := res["content"].(string)
+		updateUnix := timeutil.TimeStamp(res["updated_at"].(float64))
+		color := enry.GetColor(language)
+
+		c, ok := hit.Highlight["content"]
+		if ok && len(c) > 0 {
+			for _, p := range c {
+				s := strings.FieldsFunc(p, func(r rune) bool { return r == ':' })
+
+				if len(s) != 3 {
+					continue
+				}
+
+				s = strings.FieldsFunc(s[1], func(r rune) bool { return r == ',' })
+
+				pm := map[int]int{}
+				pl := make([]SearchResultPosition, 0)
+
+				for _, r := range s {
+					rr := strings.FieldsFunc(r, func(r rune) bool { return r == '-' })
+					if len(rr) != 2 {
+						continue
+					}
+
+					start, e1 := strconv.Atoi(rr[0])
+					end, e2 := strconv.Atoi(rr[1])
+					if e1 != nil || e2 != nil {
+						continue
+					}
+
+					pm[start] = -1
+					pm[end] = -1
+
+					pl = append(pl, SearchResultPosition{StartIndex: start, EndIndex: end})
+				}
+
+				if len(pl) == 0 {
+					continue
+				}
+
+				idx := 0
+				for cp, _ := range content {
+					_, ok := pm[idx]
+					if ok {
+						pm[idx] = cp
+					}
+					idx++
+				}
+
+				for i := range pl {
+					p := &pl[i]
+					p.StartIndex = pm[p.StartIndex]
+					p.EndIndex = pm[p.EndIndex]
+				}
+
+				hits = append(hits, &SearchResult{
+					RepoID:      repoID,
+					Filename:    fileName,
+					CommitID:    commitId,
+					Content:     content,
+					UpdatedUnix: updateUnix,
+					Language:    language,
+					Positions:   pl,
+					Color:       color,
+				})
+			}
+		}
+	}
+
+	return searchResult.TotalHits(), hits, extractAggs(searchResult), nil
+}
+
+func extractAggs(searchResult *elastic.SearchResult) []*SearchResultLanguages {
+	var searchResultLanguages []*SearchResultLanguages
+	agg, found := searchResult.Aggregations.Terms("language")
+	if found {
+		searchResultLanguages = make([]*SearchResultLanguages, 0, 10)
+
+		for _, bucket := range agg.Buckets {
+			searchResultLanguages = append(searchResultLanguages, &SearchResultLanguages{
+				Language: bucket.Key.(string),
+				Color:    enry.GetColor(bucket.Key.(string)),
+				Count:    int(bucket.DocCount),
+			})
+		}
+	}
+	return searchResultLanguages
+}
+
+// Search searches for codes and language stats by given conditions.
+func (b *ElasticSearchIndexer) Search(repoIDs []int64, language, keyword string, page, pageSize int) (int64, []*SearchResult, []*SearchResultLanguages, error) {
+	kwQuery := elastic.NewQueryStringQuery(keyword).
+		Field("content").
+		Fuzziness("AUTO").
+		AnalyzeWildcard(true).
+		Lenient(true)
+
+	query := elastic.NewBoolQuery()
+	query = query.Must(kwQuery)
+	if len(repoIDs) > 0 {
+		var repoStrs = make([]interface{}, 0, len(repoIDs))
+		for _, repoID := range repoIDs {
+			repoStrs = append(repoStrs, repoID)
+		}
+		repoQuery := elastic.NewTermsQuery("repo_id", repoStrs...)
+		query = query.Must(repoQuery)
+	}
+
+	var (
+		start       int
+		kw          = "<em>" + keyword + "</em>"
+		aggregation = elastic.NewTermsAggregation().Field("language").Size(10).OrderByCountDesc()
+	)
+
+	if page > 0 {
+		start = (page - 1) * pageSize
+	}
+
+	highlight := elastic.NewHighlight().
+		Fields(elastic.NewHighlighterField("content").
+			HighlighterType("experimental").
+			Options(map[string]interface{}{"return_offsets": true}))
+
+	if len(language) == 0 {
+		searchResult, err := b.client.Search().
+			Index(b.indexerName).
+			Aggregation("language", aggregation).
+			Query(query).
+			Highlight(highlight).
+			Sort("repo_id", true).
+			From(start).Size(pageSize).
+			Do(context.Background())
+		if err != nil {
+			return 0, nil, nil, err
+		}
+
+		return convertResult(searchResult, kw, pageSize)
+	}
+
+	langQuery := elastic.NewMatchQuery("language", language)
+	countResult, err := b.client.Search().
+		Index(b.indexerName).
+		Aggregation("language", aggregation).
+		Query(query).
+		Size(0). // We only needs stats information
+		Do(context.Background())
+	if err != nil {
+		return 0, nil, nil, err
+	}
+
+	query = query.Must(langQuery)
+	searchResult, err := b.client.Search().
+		Index(b.indexerName).
+		Query(query).
+		Highlight(highlight).
+		Sort("repo_id", true).
+		From(start).Size(pageSize).
+		Do(context.Background())
+	if err != nil {
+		return 0, nil, nil, err
+	}
+
+	total, hits, _, err := convertResult(searchResult, kw, pageSize)
+
+	return total, hits, extractAggs(countResult), err
+}
+
+// Close implements indexer
+func (b *ElasticSearchIndexer) Close() {}
diff --git a/modules/indexer/code/elastic_search_test.go b/modules/indexer/code/elastic_search_test.go
new file mode 100644
index 000000000..a23093974
--- /dev/null
+++ b/modules/indexer/code/elastic_search_test.go
@@ -0,0 +1,36 @@
+// Copyright 2020 The Gitea Authors. All rights reserved.
+// Use of this source code is governed by a MIT-style
+// license that can be found in the LICENSE file.
+
+package code
+
+import (
+	"os"
+	"testing"
+
+	"code.gitea.io/gitea/models"
+
+	"github.com/stretchr/testify/assert"
+)
+
+func TestESIndexAndSearch(t *testing.T) {
+	models.PrepareTestEnv(t)
+
+	u := os.Getenv("TEST_INDEXER_CODE_ES_URL")
+	if u == "" {
+		t.SkipNow()
+		return
+	}
+
+	indexer, _, err := NewElasticSearchIndexer(u, "gitea_codes")
+	if err != nil {
+		assert.Fail(t, "Unable to create ES indexer Error: %v", err)
+		if indexer != nil {
+			indexer.Close()
+		}
+		return
+	}
+	defer indexer.Close()
+
+	testIndexer("elastic_search", t, indexer)
+}
diff --git a/modules/indexer/code/indexer.go b/modules/indexer/code/indexer.go
index a0f91ce4b..28d7a606a 100644
--- a/modules/indexer/code/indexer.go
+++ b/modules/indexer/code/indexer.go
@@ -7,19 +7,27 @@ package code
 import (
 	"context"
 	"os"
+	"strconv"
+	"strings"
 	"time"
 
+	"code.gitea.io/gitea/models"
 	"code.gitea.io/gitea/modules/graceful"
 	"code.gitea.io/gitea/modules/log"
 	"code.gitea.io/gitea/modules/setting"
 	"code.gitea.io/gitea/modules/timeutil"
 )
 
+// Highlight position in search result
+type SearchResultPosition struct {
+	StartIndex int
+	EndIndex   int
+}
+
 // SearchResult result of performing a search in a repo
 type SearchResult struct {
 	RepoID      int64
-	StartIndex  int
-	EndIndex    int
+	Positions   []SearchResultPosition
 	Filename    string
 	Content     string
 	CommitID    string
@@ -37,12 +45,33 @@ type SearchResultLanguages struct {
 
 // Indexer defines an interface to indexer issues contents
 type Indexer interface {
-	Index(repoID int64) error
+	Index(repo *models.Repository, sha string, changes *repoChanges) error
 	Delete(repoID int64) error
 	Search(repoIDs []int64, language, keyword string, page, pageSize int) (int64, []*SearchResult, []*SearchResultLanguages, error)
 	Close()
 }
 
+func filenameIndexerID(repoID int64, filename string) string {
+	return indexerID(repoID) + "_" + filename
+}
+
+func parseIndexerID(indexerID string) (int64, string) {
+	index := strings.IndexByte(indexerID, '_')
+	if index == -1 {
+		log.Error("Unexpected ID in repo indexer: %s", indexerID)
+	}
+	repoID, _ := strconv.ParseInt(indexerID[:index], 10, 64)
+	return repoID, indexerID[index+1:]
+}
+
+func filenameOfIndexerID(indexerID string) string {
+	index := strings.IndexByte(indexerID, '_')
+	if index == -1 {
+		log.Error("Unexpected ID in repo indexer: %s", indexerID)
+	}
+	return indexerID[index+1:]
+}
+
 // Init initialize the repo indexer
 func Init() {
 	if !setting.Indexer.RepoIndexerEnabled {
@@ -63,33 +92,59 @@ func Init() {
 	waitChannel := make(chan time.Duration)
 	go func() {
 		start := time.Now()
-		log.Info("PID: %d Initializing Repository Indexer at: %s", os.Getpid(), setting.Indexer.RepoPath)
-		defer func() {
-			if err := recover(); err != nil {
-				log.Error("PANIC whilst initializing repository indexer: %v\nStacktrace: %s", err, log.Stack(2))
-				log.Error("The indexer files are likely corrupted and may need to be deleted")
-				log.Error("You can completely remove the %q directory to make Gitea recreate the indexes", setting.Indexer.RepoPath)
+		var populate bool
+		switch setting.Indexer.RepoType {
+		case "bleve":
+			log.Info("PID: %d Initializing Repository Indexer at: %s", os.Getpid(), setting.Indexer.RepoPath)
+			defer func() {
+				if err := recover(); err != nil {
+					log.Error("PANIC whilst initializing repository indexer: %v\nStacktrace: %s", err, log.Stack(2))
+					log.Error("The indexer files are likely corrupted and may need to be deleted")
+					log.Error("You can completely remove the %q directory to make Gitea recreate the indexes", setting.Indexer.RepoPath)
+				}
+			}()
+
+			bleveIndexer, created, err := NewBleveIndexer(setting.Indexer.RepoPath)
+			if err != nil {
+				if bleveIndexer != nil {
+					bleveIndexer.Close()
+				}
 				cancel()
 				indexer.Close()
 				close(waitChannel)
-				log.Fatal("PID: %d Unable to initialize the Repository Indexer at path: %s Error: %v", os.Getpid(), setting.Indexer.RepoPath, err)
+				log.Fatal("PID: %d Unable to initialize the bleve Repository Indexer at path: %s Error: %v", os.Getpid(), setting.Indexer.RepoPath, err)
 			}
-		}()
-		bleveIndexer, created, err := NewBleveIndexer(setting.Indexer.RepoPath)
-		if err != nil {
-			if bleveIndexer != nil {
-				bleveIndexer.Close()
+			populate = created
+			indexer.set(bleveIndexer)
+		case "elasticsearch":
+			log.Info("PID: %d Initializing Repository Indexer at: %s", os.Getpid(), setting.Indexer.RepoConnStr)
+			defer func() {
+				if err := recover(); err != nil {
+					log.Error("PANIC whilst initializing repository indexer: %v\nStacktrace: %s", err, log.Stack(2))
+					log.Error("The indexer files are likely corrupted and may need to be deleted")
+					log.Error("You can completely remove the \"%s\" index to make Gitea recreate the indexes", setting.Indexer.RepoConnStr)
+				}
+			}()
+
+			esIndexer, exists, err := NewElasticSearchIndexer(setting.Indexer.RepoConnStr, setting.Indexer.RepoIndexerName)
+			if err != nil {
+				if esIndexer != nil {
+					esIndexer.Close()
+				}
+				cancel()
+				indexer.Close()
+				close(waitChannel)
+				log.Fatal("PID: %d Unable to initialize the elasticsearch Repository Indexer connstr: %s Error: %v", os.Getpid(), setting.Indexer.RepoConnStr, err)
 			}
-			cancel()
-			indexer.Close()
-			close(waitChannel)
-			log.Fatal("PID: %d Unable to initialize the Repository Indexer at path: %s Error: %v", os.Getpid(), setting.Indexer.RepoPath, err)
+			populate = !exists
+			indexer.set(esIndexer)
+		default:
+			log.Fatal("PID: %d Unknow Indexer type: %s", os.Getpid(), setting.Indexer.RepoType)
 		}
-		indexer.set(bleveIndexer)
 
 		go processRepoIndexerOperationQueue(indexer)
 
-		if created {
+		if populate {
 			go populateRepoIndexer()
 		}
 		select {
diff --git a/modules/indexer/code/indexer_test.go b/modules/indexer/code/indexer_test.go
new file mode 100644
index 000000000..32f704fbf
--- /dev/null
+++ b/modules/indexer/code/indexer_test.go
@@ -0,0 +1,83 @@
+// Copyright 2020 The Gitea Authors. All rights reserved.
+// Use of this source code is governed by a MIT-style
+// license that can be found in the LICENSE file.
+
+package code
+
+import (
+	"path/filepath"
+	"testing"
+
+	"code.gitea.io/gitea/models"
+	"github.com/stretchr/testify/assert"
+)
+
+func TestMain(m *testing.M) {
+	models.MainTest(m, filepath.Join("..", "..", ".."))
+}
+
+func testIndexer(name string, t *testing.T, indexer Indexer) {
+	t.Run(name, func(t *testing.T) {
+		var repoID int64 = 1
+		err := index(indexer, repoID)
+		assert.NoError(t, err)
+		var (
+			keywords = []struct {
+				RepoIDs []int64
+				Keyword string
+				IDs     []int64
+				Langs   int
+			}{
+				{
+					RepoIDs: nil,
+					Keyword: "Description",
+					IDs:     []int64{repoID},
+					Langs:   1,
+				},
+				{
+					RepoIDs: []int64{2},
+					Keyword: "Description",
+					IDs:     []int64{},
+					Langs:   0,
+				},
+				{
+					RepoIDs: nil,
+					Keyword: "repo1",
+					IDs:     []int64{repoID},
+					Langs:   1,
+				},
+				{
+					RepoIDs: []int64{2},
+					Keyword: "repo1",
+					IDs:     []int64{},
+					Langs:   0,
+				},
+				{
+					RepoIDs: nil,
+					Keyword: "non-exist",
+					IDs:     []int64{},
+					Langs:   0,
+				},
+			}
+		)
+
+		for _, kw := range keywords {
+			t.Run(kw.Keyword, func(t *testing.T) {
+				total, res, langs, err := indexer.Search(kw.RepoIDs, "", kw.Keyword, 1, 10)
+				assert.NoError(t, err)
+				assert.EqualValues(t, len(kw.IDs), total)
+				assert.EqualValues(t, kw.Langs, len(langs))
+
+				var ids = make([]int64, 0, len(res))
+				for _, hit := range res {
+					ids = append(ids, hit.RepoID)
+					assert.EqualValues(t, "# repo1\n\nDescription for repo1", hit.Content)
+				}
+				assert.EqualValues(t, kw.IDs, ids)
+
+			})
+		}
+
+		//indexer.Delete(repoID)
+	})
+}
diff --git a/modules/indexer/code/queue.go b/modules/indexer/code/queue.go
index 94675559e..844003e1f 100644
--- a/modules/indexer/code/queue.go
+++ b/modules/indexer/code/queue.go
@@ -10,7 +10,6 @@ import (
 	"code.gitea.io/gitea/models"
 	"code.gitea.io/gitea/modules/graceful"
 	"code.gitea.io/gitea/modules/log"
-	"code.gitea.io/gitea/modules/setting"
 )
 
 type repoIndexerOperation struct {
@@ -25,6 +24,30 @@ func initQueue(queueLength int) {
 	repoIndexerOperationQueue = make(chan repoIndexerOperation, queueLength)
 }
 
+func index(indexer Indexer, repoID int64) error {
+	repo, err := models.GetRepositoryByID(repoID)
+	if err != nil {
+		return err
+	}
+
+	sha, err := getDefaultBranchSha(repo)
+	if err != nil {
+		return err
+	}
+	changes, err := getRepoChanges(repo, sha)
+	if err != nil {
+		return err
+	} else if changes == nil {
+		return nil
+	}
+
+	if err := indexer.Index(repo, sha, changes); err != nil {
+		return err
+	}
+
+	return repo.UpdateIndexerStatus(models.RepoIndexerTypeCode, sha)
+}
+
 func processRepoIndexerOperationQueue(indexer Indexer) {
 	for {
 		select {
@@ -35,7 +58,7 @@ func processRepoIndexerOperationQueue(indexer Indexer) {
 					log.Error("indexer.Delete: %v", err)
 				}
 			} else {
-				if err = indexer.Index(op.repoID); err != nil {
+				if err = index(indexer, op.repoID); err != nil {
 					log.Error("indexer.Index: %v", err)
 				}
 			}
@@ -60,9 +83,6 @@ func UpdateRepoIndexer(repo *models.Repository, watchers ...chan<- error) {
 }
 
 func addOperationToQueue(op repoIndexerOperation) {
-	if !setting.Indexer.RepoIndexerEnabled {
-		return
-	}
 	select {
 	case repoIndexerOperationQueue <- op:
 		break
diff --git a/modules/indexer/code/search.go b/modules/indexer/code/search.go
index ca57b3ff8..2781dc2e2 100644
--- a/modules/indexer/code/search.go
+++ b/modules/indexer/code/search.go
@@ -72,32 +72,51 @@ func searchResult(result *SearchResult, startIndex, endIndex int) (*Result, erro
 	contentLines := strings.SplitAfter(result.Content[startIndex:endIndex], "\n")
 	lineNumbers := make([]int, len(contentLines))
 	index := startIndex
+	positions := result.Positions
+
 	for i, line := range contentLines {
 		var err error
-		if index < result.EndIndex &&
-			result.StartIndex < index+len(line) &&
-			result.StartIndex < result.EndIndex {
-			openActiveIndex := util.Max(result.StartIndex-index, 0)
-			closeActiveIndex := util.Min(result.EndIndex-index, len(line))
+
+		err = writeStrings(&formattedLinesBuffer, `<li>`)
+		if err != nil {
+			return nil, err
+		}
+
+		pos := 0
+		end := index + len(line)
+
+		for len(positions) > 0 {
+			p := &positions[0]
+			if p.EndIndex <= p.StartIndex || p.EndIndex <= (index + pos) {
+				positions = positions[1:]
+				continue
+			}
+
+			if p.StartIndex >= end {
+				break
+			}
+
+			openActiveIndex := util.Max(p.StartIndex-index, pos)
+			closeActiveIndex := util.Min(p.EndIndex-index, len(line))
+
 			err = writeStrings(&formattedLinesBuffer,
-				`<li>`,
-				html.EscapeString(line[:openActiveIndex]),
+				html.EscapeString(line[pos:openActiveIndex]),
 				`<span class='active'>`,
 				html.EscapeString(line[openActiveIndex:closeActiveIndex]),
 				`</span>`,
-				html.EscapeString(line[closeActiveIndex:]),
-				`</li>`,
-			)
-		} else {
-			err = writeStrings(&formattedLinesBuffer,
-				`<li>`,
-				html.EscapeString(line),
-				`</li>`,
 			)
+
+			if err != nil {
+				return nil, err
+			}
+
+			pos = closeActiveIndex
 		}
-		if err != nil {
-			return nil, err
-		}
+
+		err = writeStrings(&formattedLinesBuffer,
+			html.EscapeString(line[pos:]),
+			`</li>`,
+		)
 
 		lineNumbers[i] = startLineNum + i
 		index += len(line)
@@ -129,7 +148,7 @@ func PerformSearch(repoIDs []int64, language, keyword string, page, pageSize int
 	displayResults := make([]*Result, len(results))
 
 	for i, result := range results {
-		startIndex, endIndex := indices(result.Content, result.StartIndex, result.EndIndex)
+		startIndex, endIndex := indices(result.Content, result.Positions[0].StartIndex, result.Positions[len(result.Positions)-1].EndIndex)
 		displayResults[i], err = searchResult(result, startIndex, endIndex)
 		if err != nil {
 			return 0, nil, nil, err
diff --git a/modules/indexer/code/wrapped.go b/modules/indexer/code/wrapped.go
index 926597a38..d83954487 100644
--- a/modules/indexer/code/wrapped.go
+++ b/modules/indexer/code/wrapped.go
@@ -7,6 +7,8 @@ package code
 import (
 	"fmt"
 	"sync"
+
+	"code.gitea.io/gitea/models"
 )
 
 var (
@@ -55,12 +57,12 @@ func (w *wrappedIndexer) get() (Indexer, error) {
 	return w.internal, nil
 }
 
-func (w *wrappedIndexer) Index(repoID int64) error {
+func (w *wrappedIndexer) Index(repo *models.Repository, sha string, changes *repoChanges) error {
 	indexer, err := w.get()
 	if err != nil {
 		return err
 	}
-	return indexer.Index(repoID)
+	return indexer.Index(repo, sha, changes)
 }
 
 func (w *wrappedIndexer) Delete(repoID int64) error {
diff --git a/modules/setting/indexer.go b/modules/setting/indexer.go
index 4d4df6201..36785b9ab 100644
--- a/modules/setting/indexer.go
+++ b/modules/setting/indexer.go
@@ -36,7 +36,10 @@ var (
 		StartupTimeout        time.Duration
 
 		RepoIndexerEnabled bool
+		RepoType           string
 		RepoPath           string
+		RepoConnStr        string
+		RepoIndexerName    string
 		UpdateQueueLength  int
 		MaxIndexerFileSize int64
 		IncludePatterns    []glob.Glob
@@ -52,6 +55,11 @@ var (
 		IssueQueueConnStr:     "",
 		IssueQueueBatchNumber: 20,
 
+		RepoIndexerEnabled: false,
+		RepoType:           "bleve",
+		RepoPath:           "indexers/repos.bleve",
+		RepoConnStr:        "",
+		RepoIndexerName:    "gitea_codes",
 		MaxIndexerFileSize: 1024 * 1024,
 		ExcludeVendored:    true,
 	}
@@ -73,10 +81,14 @@ func newIndexerService() {
 	Indexer.IssueQueueBatchNumber = sec.Key("ISSUE_INDEXER_QUEUE_BATCH_NUMBER").MustInt(20)
 
 	Indexer.RepoIndexerEnabled = sec.Key("REPO_INDEXER_ENABLED").MustBool(false)
+	Indexer.RepoType = sec.Key("REPO_INDEXER_TYPE").MustString("bleve")
 	Indexer.RepoPath = sec.Key("REPO_INDEXER_PATH").MustString(path.Join(AppDataPath, "indexers/repos.bleve"))
 	if !filepath.IsAbs(Indexer.RepoPath) {
 		Indexer.RepoPath = path.Join(AppWorkPath, Indexer.RepoPath)
 	}
+	Indexer.RepoConnStr = sec.Key("REPO_INDEXER_CONN_STR").MustString("")
+	Indexer.RepoIndexerName = sec.Key("REPO_INDEXER_NAME").MustString("gitea_codes")
+
 	Indexer.IncludePatterns = IndexerGlobFromString(sec.Key("REPO_INDEXER_INCLUDE").MustString(""))
 	Indexer.ExcludePatterns = IndexerGlobFromString(sec.Key("REPO_INDEXER_EXCLUDE").MustString(""))
 	Indexer.ExcludeVendored = sec.Key("REPO_INDEXER_EXCLUDE_VENDORED").MustBool(true)
diff --git a/templates/explore/code.tmpl b/templates/explore/code.tmpl
index 4a1b792b0..97ed048c9 100644
--- a/templates/explore/code.tmpl
+++ b/templates/explore/code.tmpl
@@ -28,37 +28,39 @@
                 <div class="repository search">
                     {{range $result := .SearchResults}}
                         {{$repo := (index $.RepoMaps .RepoID)}}
-                        <div class="diff-file-box diff-box file-content non-diff-file-content repo-search-result">
-                            <h4 class="ui top attached normal header">
-                                <span class="file"><a rel="nofollow" href="{{EscapePound $repo.HTMLURL}}">{{$repo.FullName}}</a> - {{.Filename}}</span>
-                                <a class="ui basic grey tiny button" rel="nofollow" href="{{EscapePound $repo.HTMLURL}}/src/commit/{{$result.CommitID}}/{{EscapePound .Filename}}">{{$.i18n.Tr "repo.diff.view_file"}}</a>
-                            </h4>
-                            <div class="ui attached table segment">
-                                <div class="file-body file-code code-view">
-                                    <table>
-                                        <tbody>
-                                            <tr>
-                                                <td class="lines-num">
-                                                    {{range .LineNumbers}}
-                                                        <a href="{{EscapePound $repo.HTMLURL}}/src/commit/{{$result.CommitID}}/{{EscapePound $result.Filename}}#L{{.}}"><span>{{.}}</span></a>
-                                                    {{end}}
-                                                </td>
-                                                <td class="lines-code"><pre><code class="{{.HighlightClass}}"><ol class="linenums">{{.FormattedLines}}</ol></code></pre></td>
-                                            </tr>
-                                        </tbody>
-                                    </table>
+                        {{if $repo}}
+                            <div class="diff-file-box diff-box file-content non-diff-file-content repo-search-result">
+                                <h4 class="ui top attached normal header">
+                                    <span class="file"><a rel="nofollow" href="{{EscapePound $repo.HTMLURL}}">{{$repo.FullName}}</a> - {{.Filename}}</span>
+                                    <a class="ui basic grey tiny button" rel="nofollow" href="{{EscapePound $repo.HTMLURL}}/src/commit/{{$result.CommitID}}/{{EscapePound .Filename}}">{{$.i18n.Tr "repo.diff.view_file"}}</a>
+                                </h4>
+                                <div class="ui attached table segment">
+                                    <div class="file-body file-code code-view">
+                                        <table>
+                                            <tbody>
+                                                <tr>
+                                                    <td class="lines-num">
+                                                        {{range .LineNumbers}}
+                                                            <a href="{{EscapePound $repo.HTMLURL}}/src/commit/{{$result.CommitID}}/{{EscapePound $result.Filename}}#L{{.}}"><span>{{.}}</span></a>
+                                                        {{end}}
+                                                    </td>
+                                                    <td class="lines-code"><pre><code class="{{.HighlightClass}}"><ol class="linenums">{{.FormattedLines}}</ol></code></pre></td>
+                                                </tr>
+                                            </tbody>
+                                        </table>
+                                    </div>
+                                </div>
+                                <div class="ui bottom attached table segment">
+                                    {{if $result.Language}}
+                                    <i class="color-icon" style="background-color: {{$result.Color}}"></i>{{$result.Language}}
+                                    {{end}}
+                                    &nbsp;
+                                    {{if not $result.UpdatedUnix.IsZero}}
+                                    <span class="ui small grey text pull right">{{$.i18n.Tr "explore.code_last_indexed_at" (TimeSinceUnix $result.UpdatedUnix $.i18n.Lang) | Safe}} &nbsp;</span>
+                                    {{end}}
                                 </div>
                             </div>
-							<div class="ui bottom attached table segment">
-                                {{if $result.Language}}
-								<i class="color-icon" style="background-color: {{$result.Color}}"></i>{{$result.Language}}
-                                {{end}}
-                                &nbsp;
-								{{if not $result.UpdatedUnix.IsZero}}
-								<span class="ui small grey text pull right">{{$.i18n.Tr "explore.code_last_indexed_at" (TimeSinceUnix $result.UpdatedUnix $.i18n.Lang) | Safe}} &nbsp;</span>
-								{{end}}
-							</div>
-                        </div>
+                        {{end}}
                     {{end}}
                 </div>
 			{{else}}
